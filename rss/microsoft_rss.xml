<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:wfw="http://wellformedweb.org/CommentAPI/"><channel><title>微软研究院博客 - 微软研究院</title><atom:link href="https://www.microsoft.com/en-us/research/blog/feed/?from=https%3A%2F%2Fresearch.microsoft.com%2Frss%2Fnews.xml&amp;type=rss" rel="self" type="application/rss+xml"></atom:link><link/> https://www.microsoft.com/en-us/research/blog/<description></description><lastbuilddate> 2023 年 6 月 27 日星期二 15:56:12 +0000</lastbuilddate><language> en-US</language><sy:updateperiod>每小时</sy:updateperiod><sy:updatefrequency>1</sy:updatefrequency><generator> https://wordpress.org/?v=6.2.2</generator><item><title>解锁计算的未来：模拟迭代机闪电般的优化方法</title><link/>https://www.microsoft.com/en-us/research/blog/unlocking-the-future-of-computing-the-analog-iterative-machines-lightning-fast-approach-to-optimization/<dc:creator><![CDATA[Brenda Potts]]></dc:creator><pubDate> Tue, 27 Jun 2023 13:00:00 +0000</pubDate><category><![CDATA[Research Blog]]></category><guid ispermalink="false"> https://www.microsoft.com/en-us/research/?p=947904 </guid><description><![CDATA[<p>想象这样一个世界：计算不再受 0 和 1 的二进制限制，而是可以自由地探索连续值数据的巨大可能性。在过去的三年里，微软研究人员团队一直在开发一种新型模拟光学计算机，它使用光子和电子来[...]</p><p> <a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/unlocking-the-future-of-computing-the-analog-iterative-machines-lightning-fast-approach-to-optimization/">《解锁计算的未来：模拟迭代机的闪电般的优化方法》一文</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>; </description><content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img decoding="async" width="1024" height="576" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-1024x576.jpg" alt="模拟迭代机 (AIM)" class="wp-image-947925" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-1024x576.jpg 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-300x169.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-768x432.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-1066x600.jpg 1066w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-655x368.jpg 655w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-343x193.jpg 343w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-240x135.jpg 240w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-640x360.jpg 640w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-960x540.jpg 960w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1-1280x720.jpg 1280w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-BlogHero-1400x788-1.jpg 1400w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure><p>想象这样一个世界：计算不再受 0 和 1 的二进制限制，而是可以自由地探索连续值数据的巨大可能性。在过去的三年里，微软研究人员团队一直在开发一种新型模拟光学计算机，它使用光子和电子来处理连续的值数据，这与当今使用晶体管处理二进制数据的数字计算机不同。这款创新的新机器有潜力超越最先进的数字技术，并在未来几年改变计算。</p><p> <a href="https://www.microsoft.com/en-us/research/project/aim/" target="_blank" rel="noreferrer noopener">模拟迭代机</a>(AIM) 旨在解决困难的优化问题，这些问题构成了许多行业的基础，例如金融、物流、运输、能源、医疗保健和制造。然而，传统数字计算机难以及时、节能且经济高效地解决这些问题。这是因为随着问题规模的增长，可能的组合数量呈指数级增长，即使对于最强大的数字计算机来说，这也是一个巨大的挑战。 <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem" target="_blank" rel="noreferrer noopener">旅行商问题</a>就是一个典型的例子。想象一下，在返回起点之前，尝试找到最有效的路线来访问一组城市一次。只有 5 个城市，就有 12 条可能的路线 - 但对于 61 个城市的问题，潜在路线的数量超过了宇宙中的原子数量。</p><p> AIM 解决了两个同时发生的趋势。首先，它回避了数字芯片中每美元计算能力的增长放缓，或者说摩尔定律的瓦解。其次，它克服了为解决优化问题而设计的专用机器的局限性。尽管经过二十多年的研究和大量的行业投资，这种非常规的基于硬件的机器的实际应用范围有限，因为它们只能解决二进制值的优化问题。优化社区内的这一痛苦认识促使团队开发 AIM，其设计将数学见解与尖端算法和硬件进步相结合。结果？模拟光学计算机可以解决更广泛的现实世界优化问题，同时以光速运行，提供大约一百倍的潜在速度和效率增益。</p><p>如今，AIM 仍然是一个研究项目，但跨学科团队最近组装了世界上第一个用于混合（连续和二元）优化问题的光电硬件。尽管目前运营规模有限，但初步结果令人鼓舞，该团队已开始加大力度。其中包括与英国跨国银行巴克莱银行的<a href="https://aka.ms/AAkwu7z" target="_blank" rel="noreferrer noopener">研究合作</a>，以解决 AIM 计算机上对金融市场至关重要的优化问题。单独的参与旨在获得更多解决行业特定优化问题的经验。 2023 年 6 月，该团队推出了一项<a href="https://www.microsoft.com/en-us/research/project/aim/" target="_blank" rel="noreferrer noopener">在线服务</a>，提供 AIM 模拟器，让合作伙伴探索这种新型计算机所创造的机会。</p><h2 class="wp-block-heading" id="the-technology">技术</h2><p>光子具有一种不相互作用的显着特性，这种特性使大量数据能够通过光远距离传输，从而支撑了互联网时代。然而，光子确实与它们传播的物质相互作用，允许进行加法和乘法等线性运算，这构成了优化应用的基础。例如，当光线照射到智能手机上的相机传感器上时，它会将传入的光子相加并产生等量的电流。此外，通过光纤进行数据传输（为家庭和企业带来互联网连接）依赖于通过以编程方式控制光强度将零和一编码到光上。这种通过光与物质相互作用的光缩放将光强度乘以特定值——光学域中的乘法。除了用于线性运算的光学技术之外，日常技术中流行的各种其他电子元件也可以执行非线性运算，这对于高效的优化算法也至关重要。</p><p>因此，模拟光学计算涉及使用模拟技术（光学和电子技术）的组合来构建物理系统，并由捕获所需计算的方程控制。这对于线性和非线性操作占主导地位的特定应用类别来说非常有效。在优化问题中，寻找最优解就像大海捞针一样。该团队开发了一种新算法，在此类寻针任务中非常高效。至关重要的是，该算法的核心运算涉及执行数十万甚至数百万次向量矩阵乘法——向量代表问题变量，其值需要在矩阵对问题本身进行编码时确定。这些乘法使用商用光学和电子技术快速且低能耗地执行，如图 1 所示。 </p><figure class="wp-block-image aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="432" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure1_AIM_illustration-1024x432.jpg" alt="图 1：AIM 计算机示意图" class="wp-image-949068" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure1_AIM_illustration-1024x432.jpg 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure1_AIM_illustration-300x126.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure1_AIM_illustration-768x324.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure1_AIM_illustration-665x280.jpg 665w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure1_AIM_illustration-240x101.jpg 240w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure1_AIM_illustration.jpg 1400w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">图 1：AIM 计算机的图示，它使用商用光学技术（后面）实现大规模并行矢量矩阵乘法，并使用模拟电子技术应用非线性（前面）。该矢量使用光源阵列表示，矩阵嵌入调制器阵列（以灰度显示），并将结果收集到相机传感器中。 </figcaption></figure><figure class="wp-block-image aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-1024x576.jpg" alt="图2：第二代AIM计算机" class="wp-image-949065" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-1024x576.jpg 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-300x169.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-768x432.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-1066x600.jpg 1066w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-655x368.jpg 655w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-343x193.jpg 343w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-240x135.jpg 240w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-640x360.jpg 640w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-960x540.jpg 960w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788-1280x720.jpg 1280w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/Figure2_AIM_illustration_1400x788.jpg 1400w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">图 2：第二代 AIM 计算机具有 48 个变量，是机架式设备。</figcaption></figure><p>由于所有这些组件都微型化到微小的厘米级芯片上，整个 AIM 计算机可以装入一个小型机架外壳中 - 如图 2 所示。由于光的传播速度令人难以置信 - 每米 5 纳秒 - AIM 计算机内的每次迭代都是与在数字计算机上运行相同的算法相比，速度明显更快且耗电量更少。重要的是，由于整个问题都嵌入到计算机本身内部的调制器矩阵中，因此 AIM 不需要问题在存储和计算位置之间来回传输。与同步数字计算机不同，AIM 的操作完全是异步的。这些架构选择规避了数字计算机的关键历史瓶颈。</p><p>最后，AIM 中使用的所有技术都已经在具有现有制造生态系统的消费产品中普及，如果团队能够克服所有技术挑战，这将为全面可行的计算平台铺平道路。</p><h2 class="wp-block-heading" id="the-importance-of-optimization-problems">最优化问题的重要性</h2><p>优化问题是数学挑战，需要从一组可行的替代方案中找到最佳的解决方案。现代世界在很大程度上依赖于这些问题的有效解决方案——从管理电网电力、简化海上、空中和陆地的货物运输，到优化互联网流量路由。</p><p>有效且高效地解决优化问题可以显着改善许多其他行业的流程和结果。以金融为例，投资组合优化涉及选择理想的资产组合，以最大化回报，同时最小化风险。在医疗保健领域，优化患者安排可以增强资源分配并最大限度地减少医院的等待时间。</p><p>对于许多更大的问题，即使是世界上最大的超级计算机也需要数年甚至数百年才能找到此类问题的最佳解决方案。一种常见的解决方法是启发式算法——通过采用捷径或“经验法则”提供近似解决方案的问题解决技术。尽管这些算法可能不能保证找到最优解，但它们是在合理的时间范围内找到接近最优解的最实用、最有效的方法。现在，想象一下计算机的巨大影响，它可以在更短的时间内为这些关键问题提供更优化的解决方案。在某些情况下，实时解决这些问题可能会产生积极成果的多米诺骨牌效应，彻底改变整个工作流程和行业。</p><h2 class="wp-block-heading" id="qumo-a-world-beyond-qubo"> QUMO：超越 QUBO 的世界</h2><p>多年来，工业界和学术界的研究人员已经构建了令人印象深刻的专用机器，以使用启发式算法有效地解决优化问题。这包括一系列定制硬件，例如现场可编程门阵列 (FPGA)、量子退火器以及电和光参量振荡器系统。然而，它们都依赖于将困难的优化问题映射到相同的二进制表示，通常称为 Ising、Max-Cut 或 QUBO（二次无约束二进制优化）。不幸的是，这些努力都没有提供传统计算机的实用替代方案。这是因为将现实世界的优化问题大规模映射到二进制抽象是非常困难的，这是团队与行业和学术界从业者合作的共同主题。</p><p>通过 AIM，该团队引入了一种更具表现力的数学抽象，称为 QUMO（二次无约束混合优化），它可以表示混合（二进制和连续）变量，并且与硬件实现兼容，使其成为许多实用的、重度复杂的应用程序的“最佳选择”。约束优化问题。与行业专家的讨论表明，将 AIM 扩展到 10,000 个变量意味着前面讨论的大多数实际问题都可以解决。具有 10,000 个变量且可以直接映射到 QUMO 抽象的问题将需要具有 10,000 个物理变量的 AIM 计算机。相比之下，现有的专用机器需要扩展到超过一百万个物理变量，远远超出底层硬件的能力。 </p><div class="annotations " data-bi-aN="margin-callout"><ul class="annotations__list card depth-16 bg-body p-4 annotations__list--right"><li class="annotations__list-item"> <span class="annotations__type d-block text-uppercase font-weight-semibold text-neutral-300 small">出版物</span><a href="https://www.microsoft.com/en-us/research/publication/analog-iterative-machine-aim-using-light-to-solve-quadratic-optimization-problems-with-mixed-variables/" target="_self" class="annotations__link font-weight-semibold text-decoration-none" data-bi-type="annotated-link" aria-label="Analog Iterative Machine (AIM): using light to solve quadratic optimization problems with mixed variables" data-bi-aN="margin-callout" data-bi-cN="Analog Iterative Machine (AIM): using light to solve quadratic optimization problems with mixed variables">模拟迭代机（AIM）：使用光解决混合变量的二次优化问题<span class="glyph-append glyph-append-chevron-right glyph-append-xsmall"></span></a></li></ul></div><p> AIM 还实现了一种新颖且高效的算法来解决此类 QUMO 问题，该算法依赖于梯度下降的高级形式，这种技术在机器学习中也很流行。该算法在各种受工业启发的问题基准测试中显示出极具竞争力的性能和准确性。它甚至发现了四个问题的最佳新解决方案。去年建成的第一代 AIM 计算机解决了 QUMO 优化问题，其精度高达 7 位。如图 3 所示，该团队还展示了 AIM 计算机的模拟版本和硬件版本之间良好的定量一致性，以便进一步确信随着计算机规模的扩大，这些效率提升的可行性。 <a href="https://www.microsoft.com/en-us/research/publication/analog-iterative-machine-aim-using-light-to-solve-quadratic-optimization-problems-with-mixed-variables/" target="_blank" rel="noreferrer noopener">本文</a>提供了有关 AIM 架构、其实现、评估和扩展路线图的更多详细信息。 </p><figure class="wp-block-image aligncenter size-large is-resized"><img decoding="async" loading="lazy" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-1024x576.jpg" alt="AIM 团队照片 – 前排（从左到右）：Doug Kelly、Jiaqi Chu、James Clegg、Babak Rahmani。后排：Hitesh Ballani、George Mourgias-Alexandris、Daniel Cletheroe、Francesca Parmigiani、Lucinda Pickup、Grace Brennan、Ant Rowstron、Kirill Kalinin、Jonathan Westcott、Christos Gkantsidis。 （格雷格·奥谢和詹尼斯·格拉德罗没有出现在这张照片中。）" class="wp-image-949080" width="801" height="450" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-1024x576.jpg 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-300x169.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-768x432.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-1066x600.jpg 1066w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-655x368.jpg 655w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-343x193.jpg 343w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-240x135.jpg 240w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-640x360.jpg 640w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-960x540.jpg 960w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788-1280x720.jpg 1280w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/AIM-blog_team-photo_1400x788.jpg 1400w" sizes="(max-width: 801px) 100vw, 801px" /><figcaption class="wp-element-caption">图 3：AIM 的设计涉及光学和模拟硬件、数学和算法以及软件和系统架构的交叉创新，这体现在团队的跨学科性质上，他们携手合作，致力于构建一个解决实际问题的计算机。 AIM 团队照片 – 前排（从左到右）：Doug Kelly、Jiaqi Chu、James Clegg、Babak Rahmani。后排：Hitesh Ballani、George Mourgias-Alexandris、Daniel Cletheroe、Francesca Parmigiani、Lucinda Pickup、Grace Brennan、Ant Rowstron、Kirill Kalinin、Jonathan Westcott、Christos Gkantsidis。 （格雷格·奥谢和詹尼斯·格拉德罗没有出现在这张照片中。） </figcaption></figure><h2 class="wp-block-heading" id="rethinking-optimization-with-qumo-a-more-expressive-way-of-reasoning-for-experts">使用 QUMO 重新思考优化：为专家提供更具表现力的推理方式</h2><p>AIM 的蓝图利用更具表现力的抽象和新算法共同设计非传统硬件，有可能利用更具表现力的 QUMO 抽象，在优化技术、硬件平台和自动化问题映射程序方面引发新时代。这一激动人心的旅程已经开始，将金融和医疗保健等不同领域的问题映射到 AIM 的 QUMO 抽象中，取得了可喜的结果。最近的研究已经表明，通过连续变量提高表达能力可以大大扩展可以解决的现实世界业务问题。然而，据团队所知，AIM 是第一个也是唯一一个原生支持这种抽象的硬件。</p><p>当我们冒险进入新的抽象概念时，我们也必须采用新的思维方式。对于团队来说，建立一个强大的社区来深入研究拥抱 QUMO 的好处至关重要。我们邀请以前因二元求解器的局限性而受阻的人们考虑 AIM 的 QUMO 抽象提供的新机会。为了实现这一目标，我们将<a href="https://www.microsoft.com/en-us/research/project/aim/">AIM 模拟器作为一项服务</a>发布，让选定的用户获得第一手体验。最初的用户是该团队在<a href="https://www.cs.princeton.edu/~kylej/" target="_blank" rel="noreferrer noopener">普林斯顿大学</a>和<a href="https://www.damtp.cam.ac.uk/person/ngb23" target="_blank" rel="noreferrer noopener">剑桥大学</a>的合作者。他们帮助我们发现了几个令人兴奋的问题，其中 AIM 计算机及其抽象更适合这些问题。我们还积极与来自 Microsoft 内部部门和优化至关重要的领域的外部公司的思想领袖进行交流。</p><p>我们可以共同推动创新并释放模拟光学计算的真正潜力，以解决跨行业的一些最复杂的优化问题。</p><div class="wp-block-buttons"><div class="wp-block-button is-style-outline"><a data-bi-type="button" class="wp-block-button__link wp-element-button">向我们询问 AIM 服务</a></div></div><p><a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/unlocking-the-future-of-computing-the-analog-iterative-machines-lightning-fast-approach-to-optimization/">《解锁计算的未来：模拟迭代机的闪电般的优化方法》一文</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>;</content:encoded></item><item><title>研究重点：2023 年 6 月 19 日当周</title><link/>https://www.microsoft.com/en-us/research/blog/research-focus-week-of-june-19-2023/<dc:creator><![CDATA[Alyssa Hughes]]></dc:creator><pubDate> Fri, 23 Jun 2023 21:57:51 +0000</pubDate><category><![CDATA[Research Blog]]></category><guid ispermalink="false"> https://www.microsoft.com/en-us/research/?p=949350 </guid><description><![CDATA[<p>本期：我们新的负责任的人工智能成熟度模型； FoundWright 帮助“重新查找”网页；递归函数程序的跟踪引导归纳综合；用于弱引用计数的无等待算法；以及并发测试的新研究。</p><p> <a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/research-focus-week-of-june-19-2023/">研究焦点：2023 年 6 月 19 日一周</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>; </description><content:encoded><![CDATA[
<figure class="wp-block-image size-full"><img decoding="async" loading="lazy" width="1400" height="264" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/RF18-blog-banner-1400x264-1.jpg" alt="微软研究焦点 18 | 2023 年 6 月 19 日当周" class="wp-image-950397" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/RF18-blog-banner-1400x264-1.jpg 1400w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/RF18-blog-banner-1400x264-1-300x57.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/RF18-blog-banner-1400x264-1-1024x193.jpg 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/RF18-blog-banner-1400x264-1-768x145.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/RF18-blog-banner-1400x264-1-240x45.jpg 240w" sizes="(max-width: 1400px) 100vw, 1400px" /></figure><figure class="wp-block-pullquote"><blockquote><p><em class="">欢迎来到研究焦点，这是一系列博客文章，重点介绍 Microsoft 研究社区的著名出版物、活动、代码/数据集、新员工和其他里程碑。</em> </p></blockquote></figure><aside id=accordion-86daf9bc-c02a-47f0-9424-0504dd335f88 class="msr-table-of-contents-block accordion mb-5 pb-0" data-bi-aN="table-of-contents"> <button class="btn btn-collapse bg-gray-100 mb-0 display-flex justify-content-between" type="button" data-mount="collapse" data-target="#accordion-collapse-86daf9bc-c02a-47f0-9424-0504dd335f88" aria-expanded="true" aria-controls="accordion-collapse-86daf9bc-c02a-47f0-9424-0504dd335f88"><span class="msr-table-of-contents-block__label subtitle">在本文中</span><span class="msr-table-of-contents-block__current mr-4 text-gray-600 font-weight-normal" aria-hidden="true"></span></button> <div id="accordion-collapse-86daf9bc-c02a-47f0-9424-0504dd335f88" class="msr-table-of-contents-block__collapse-wrapper collapse show" data-parent="#accordion-86daf9bc-c02a-47f0-9424-0504dd335f88"><div class="accordion-body bg-gray-100 border-top pt-4"><ol class="msr-table-of-contents-block__list"><li class="msr-table-of-contents-block__list-item"><a href="#responsible-ai-maturity-model" class="msr-table-of-contents-block__list-item-link">负责任的人工智能成熟度模型</a></li><li class="msr-table-of-contents-block__list-item"><a href="#foundwright-helps-people-re-find-web-content-they-previously-discovered" class="msr-table-of-contents-block__list-item-link">FoundWright 帮助人们重新查找他们以前发现的网络内容</a></li><li class="msr-table-of-contents-block__list-item"><a href="#trace-guided-inductive-synthesis-of-recursive-functional-programs" class="msr-table-of-contents-block__list-item-link">递归函数程序的跟踪引导归纳综合</a></li><li class="msr-table-of-contents-block__list-item"><a href="#wait-free-weak-reference-counting" class="msr-table-of-contents-block__list-item-link">无等待弱引用计数</a></li><li class="msr-table-of-contents-block__list-item"><a href="#disaggregating-stateful-network-functions" class="msr-table-of-contents-block__list-item-link">分解有状态的网络功能</a></li><li class="msr-table-of-contents-block__list-item"><a href="#industrial-strength-controlled-concurrency-testing-for-c-programs-with-coyote" class="msr-table-of-contents-block__list-item-link">使用 Coyote 对 C# 程序进行工业强度的受控并发测试</a></li></ul></div></div><span class="msr-table-of-contents-block__progress-bar"></span></aside><h6 class="wp-block-heading has-blue-color has-text-color" id="new-resource">新资源</h6><h2 class="wp-block-heading" id="responsible-ai-maturity-model">负责任的人工智能成熟度模型</h2><p>随着人工智能的使用持续激增，预计政府将出台新的法规。但构建和使用人工智能技术的组织无需等待就可以负责任地制定最佳实践来开发和部署人工智能系统。许多公司已采用负责任的人工智能（RAI）原则作为自我监管的一种形式。然而，有效地将这些原则转化为实践具有挑战性。</p><p>为了帮助组织确定当前和期望的 RAI 成熟度水平，Microsoft 的研究人员开发了<a href="https://www.microsoft.com/en-us/research/publication/responsible-ai-maturity-model/">Responsible AI 成熟度模型</a>(RAI MM)。 RAI MM 是一个框架，包含 24 个根据经验得出的维度，这些维度对于组织的 RAI 成熟度至关重要，并且还包含成熟度进展的路线图，以便组织和团队可以确定他们所处的位置以及下一步的发展方向。</p><p> RAI MM 源自对 90 多名 RAI 专家和 AI 从业者的采访和焦点小组，即使 RAI 不断发展，也可以帮助组织和团队驾驭 RAI 之旅。 </p><div class="wp-block-buttons is-content-justification-center"><div class="wp-block-button is-style-outline"> <a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/uploads/prod/2023/05/RAI_Maturity_Model_Aether_Microsoft_whitepaper.pdf">了解更多</a></div></div><div style="height:15px" aria-hidden="true" class="wp-block-spacer"></div><div class="border-bottom border-top border-gray-300 mt-5 mt-md-4 mb-4 mb-md-5 msr-promo text-center text-md-left alignwide" data-bi-aN="promo" data-bi-id="932112"><p class="msr-promo__label text-gray-800 text-center text-uppercase"><span class="px-4 bg-white display-inline-block font-weight-semibold small">焦点：微软研究院播客</span></p><div class="row pt-3 pb-4 align-items-center"><div class="msr-promo__media col-12 col-md-5"> <a class="bg-gray-300" href="https://www.microsoft.com/en-us/research/podcast/ai-frontiers-ai-for-health-and-the-future-of-research-with-peter-lee/" aria-label="AI Frontiers: AI for health and the future of research with Peter Lee" data-bi-cN="AI Frontiers: AI for health and the future of research with Peter Lee" target="_blank"><img decoding="async" class="w-100 display-block" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/03/PeterLee_podcast-2023Mar_hero_1400x788.png" alt="Peter Lee 戴着眼镜，对着镜头微笑，左侧有 Microsoft Research Podcast 徽标" /></a></div><div class="msr-promo__content py-3 col-12 col-md"><h2 class="h4"> AI 前沿：Peter Lee 的 AI 健康与研究的未来</h2><p class="large">微软研究院院长 Peter Lee 和 AI 科学家兼工程师 Ashley Llorens 讨论了 AI 研究的未来以及 GPT-4 作为医疗副驾驶的潜力。 </p><div class="wp-block-buttons justify-content-center justify-content-md-start"><div class="wp-block-button"> <a href="https://www.microsoft.com/en-us/research/podcast/ai-frontiers-ai-for-health-and-the-future-of-research-with-peter-lee/" class="btn btn-brand glyph-append glyph-append-chevron-right" aria-label="Listen now" data-bi-cN="AI Frontiers: AI for health and the future of research with Peter Lee" target="_blank">现在听</a></div></div></div><!--/.msr-promo__content--></div><!--/.msr-promo__inner-wrap--></div><!--/.msr-promo--><h6 class="wp-block-heading has-blue-color has-text-color" id="new-research">新研究</h6><h2 class="wp-block-heading" id="foundwright-helps-people-re-find-web-content-they-previously-discovered"> FoundWright 帮助人们重新查找他们以前发现的网络内容</h2><p>重新查找信息是一项常见任务 - 大多数在线搜索请求都涉及重新查找信息。然而，当人们难以表达他们所寻求的东西时，这可能会很困难。人们可能会忘记他们想要重新查找的信息的确切细节，从而很难编写查询来找到它。人们还可能难以恢复网络存储库中的信息，例如书签或历史记录，因为这些信息无法捕获足够的信息，或者无法提供允许模糊查询的体验。因此，当人们面临重新寻找任务时，可能会感到不知所措和认知疲惫。</p><p> Microsoft 研究人员的一篇新论文： <a href="https://www.microsoft.com/en-us/research/publication/foundwright-a-system-to-help-people-re-find-pages-from-their-web-history/" target="_blank" rel="noreferrer noopener">FoundWright：帮助人们从网络历史记录中重新查找页面的系统</a>介绍了一种解决这些问题的新系统。 FoundWright 利用语言转换器模型的最新进展，通过定义可吸引具有语义相似内容的文档的概念来扩展人们表达其所寻求内容的能力。研究人员使用 FoundWright 作为设计探针来了解人们如何创建和使用概念；这种扩展的能力如何帮助重新发现；以及人们如何利用 FoundWright 的机器学习支持进行参与和协作。研究表明，这种表达重新寻找目标的扩展方式补充了传统的搜索和浏览。 </p><div class="wp-block-buttons is-content-justification-center"><div class="wp-block-button is-style-outline"> <a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/publication/foundwright-a-system-to-help-people-re-find-pages-from-their-web-history/">阅读论文</a></div></div><hr class="wp-block-separator has-alpha-channel-opacity is-style-dots"/><h6 class="wp-block-heading has-blue-color has-text-color" id="new-research-1">新研究</h6><h2 class="wp-block-heading" id="trace-guided-inductive-synthesis-of-recursive-functional-programs">递归函数程序的跟踪引导归纳综合</h2><p>近年来，研究人员在递归函数程序的综合方面取得了重大进展，包括从输入输出示例归纳综合递归程序的进展。然而，后一个问题仍然带来一些挑战。</p><p>微软和普渡大学的研究人员在一篇新论文《 <a href="https://www.microsoft.com/en-us/research/publication/trace-guided-inductive-synthesis-of-recursive-functional-programs/" target="_blank" rel="noreferrer noopener">递归函数式程序的跟踪引导归纳</a><a href="https://pldi23.sigplan.org/" target="_blank" rel="noreferrer noopener">综合》中提出了一种新颖的跟踪引导方法，该论文获得了 ACM SIGPLAN 编程语言设计与实现会议</a>(PLDI 2023) 杰出论文奖解决从示例合成递归函数程序时的歧义和泛化的挑战。这种方法通过由程序的递归子调用序列组成的递归跟踪来扩大程序的搜索空间。它基于新版本的空间代数 (VSA)，用于简洁表示和有效操作彼此一致的递归轨迹对和程序。研究人员在名为 SyRup 的工具中实施了这种方法。根据先前工作的基准评估 SyRup 表明，与现有合成器相比，它不仅需要更少的示例来实现一定的成功率，而且对示例的质量也不太敏感。</p><p>这些结果表明，利用递归跟踪来区分具有相似大小的令人满意的程序适用于广泛的任务。 </p><div class="wp-block-buttons is-content-justification-center"><div class="wp-block-button is-style-outline"> <a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/publication/trace-guided-inductive-synthesis-of-recursive-functional-programs/">阅读论文</a></div></div><hr class="wp-block-separator has-alpha-channel-opacity is-style-dots"/><h6 class="wp-block-heading has-blue-color has-text-color" id="new-research-2">新研究</h6><h2 class="wp-block-heading" id="wait-free-weak-reference-counting">无等待弱引用计数</h2><p>引用计数是内存管理的常用方法。引用计数的一大挑战是循环阻止对象被释放。 C++ 和 Rust 标准库等系统引入了两种类型的引用：强引用和弱引用。强引用允许访问对象并防止对象被释放，而弱引用仅阻止释放。如果存在对该对象的其他强引用，则可以将弱引用升级为提供强引用。因此，升级操作是部分的，并且可能会动态失败。此升级操作的经典实现不是免等待的，如果引用计数存在争用，则可能需要任意长的时间才能完成。</p><p>在一篇新论文《 <a href="https://www.microsoft.com/en-us/research/publication/wait-free-weak-reference-counting/" target="_blank" rel="noreferrer noopener">Wait-Free Weak Reference Counting》</a>中，微软的研究人员提出了一种弱引用计数的无等待算法，该算法需要“比较和交换”、“获取和添加”等原始的无等待原子操作。该论文包括使用 Starling 验证工具的算法正确性证明、C++ 的完整实现，以及使用微基准测试的最佳和最差情况性能的演示。</p><p>新算法在最好的情况下比经典算法更快，但在最坏的情况下会产生开销。研究人员提出了一种更复杂的算法，有效地结合了经典算法和无等待算法，在最坏的情况下提供了更好的性能，同时保持了无等待算法的优点。 </p><div class="wp-block-buttons is-content-justification-center"><div class="wp-block-button is-style-outline"> <a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/publication/wait-free-weak-reference-counting/">阅读论文</a></div></div><hr class="wp-block-separator has-alpha-channel-opacity is-style-dots"/><h6 class="wp-block-heading has-blue-color has-text-color" id="new-research-3">新研究</h6><h2 class="wp-block-heading" id="disaggregating-stateful-network-functions">分解有状态的网络功能</h2><p>出于安全、隔离、计量和其他目的，当今的公共云在每台服务器上实现了复杂的网络功能。当今的实施方式，无论是在软件中还是在连接到每个主机的 FPGA 和 ASIC 中，都变得越来越复杂和昂贵，从而造成了可扩展性的瓶颈。</p><p>在一篇新论文《 <a href="https://www.microsoft.com/en-us/research/publication/disaggregating-stateful-network-functions/">分解状态网络功能》</a>中，微软的研究人员提出了一种不同的设计，通过新颖地使用将通用 ARM 内核与高速状态匹配紧密集成的设备，将网络功能处理从主机分解并分解到共享资源池中处理 ASIC。当工作分布在虚拟机之间时，这种分解可以以更低的每台服务器成本提供比现有技术更好的可靠性和性能。该论文发表在<a href="https://www.usenix.org/conference/nsdi23" target="_blank" rel="noreferrer noopener">2023 年 USENIX 网络系统设计和实现 (NSDI) 研讨会</a>上，其中包括针对随之而来的挑战的解决方案，并介绍了大型公共云上的生产部署结果。 </p><div class="wp-block-buttons is-content-justification-center"><div class="wp-block-button is-style-outline"> <a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/publication/disaggregating-stateful-network-functions/">阅读论文</a></div><div class="wp-block-button is-style-fill-download"><a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/uploads/prod/2023/04/sirius_nsdi_2023_v3_split.pptx">推介会</a></div><div class="wp-block-button"><a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://learn.microsoft.com/en-us/azure/networking/nva-accelerated-connections" target="_blank" rel="noreferrer noopener">Azure 公共预览版</a></div></div><hr class="wp-block-separator has-alpha-channel-opacity is-style-dots"/><h6 class="wp-block-heading has-blue-color has-text-color" id="new-research-4">新研究</h6><h2 class="wp-block-heading" id="industrial-strength-controlled-concurrency-testing-for-c-programs-with-coyote">使用 Coyote 对 C# 程序进行工业强度的受控并发测试</h2><p>并发测试程序具有挑战性，因为它们的执行是不确定的，使得错误很难发现、重现和调试。非确定性可能会导致<em>不稳定的</em>测试（在不更改任何代码的情况下可能会通过或失败），从而给开发团队带来巨大的工程负担。由于并发对于构建现代多线程或分布式系统至关重要，因此需要解决方案来帮助开发人员测试其并发代码的正确性。</p><p>测试并发程序有两个主要挑战。首先是再现性或控制问题，而第二个挑战是状态空间爆炸问题。并发程序即使具有固定的测试输入，也可能具有大量可能的行为。</p><p>在一篇新的研究论文： <a href="https://www.microsoft.com/en-us/research/publication/industrial-strength-controlled-concurrency-testing-for-c-programs-with-coyote/">使用 Coyote 对 C# 程序进行工业强度受控并发测试中，</a>微软的研究人员描述了用于测试用 C# 语言编写的并发程序的开源工具 Coyote 的设计和实现。该研究荣获欧洲软件科学与技术协会 (EASST) 颁发的<a href="https://pdeligia.github.io/lib/awards/easst_etaps_award_2023.pdf" target="_blank" rel="noreferrer noopener">2023 年最佳软件科学论文奖</a>。 </p><div class="wp-block-buttons is-content-justification-center"><div class="wp-block-button is-style-outline"> <a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/publication/industrial-strength-controlled-concurrency-testing-for-c-programs-with-coyote/">阅读论文</a></div></div><p><a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/research-focus-week-of-june-19-2023/">研究焦点：2023 年 6 月 19 日一周</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>;</content:encoded></item></channel></rss>