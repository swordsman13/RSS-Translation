<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:wfw="http://wellformedweb.org/CommentAPI/"><channel><title>微软研究院博客 - 微软研究院</title><atom:link href="https://www.microsoft.com/en-us/research/blog/feed/?from=https%3A%2F%2Fresearch.microsoft.com%2Frss%2Fnews.xml&amp;type=rss" rel="self" type="application/rss+xml"></atom:link><link/> https://www.microsoft.com/en-us/research/blog/<description></description><lastbuilddate> 2023 年 11 月 8 日星期三 17:10:58 +0000</lastbuilddate><language> en-US</language><sy:updateperiod>每小时</sy:updateperiod><sy:updatefrequency>1</sy:updatefrequency><generator> https://wordpress.org/?v=6.3.2</generator><item><title>研究重点：2023 年 11 月 8 日当周</title><link/>https://www.microsoft.com/en-us/research/blog/research-focus-week-of-november-8-2023/<dc:creator><![CDATA[Alyssa Hughes]]></dc:creator><pubDate> Wed, 08 Nov 2023 17:00:00 +0000</pubDate><category><![CDATA[Research Blog]]></category><guid ispermalink="false"> https://www.microsoft.com/en-us/research/?p=981456 </guid><description><![CDATA[<p>欢迎来到研究焦点，这是一系列博客文章，重点介绍 Microsoft 研究社区的著名出版物、活动、代码/数据集、新员工和其他里程碑。生成合理且准确的全身化身运动对于在混合现实场景中创建高质量的沉浸式体验至关重要。头戴式设备 (HMD) 通常仅提供 [...]</p><p> <a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/research-focus-week-of-november-8-2023/">《研究焦点：2023 年 11 月 8 日一周》一文</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>; </description><content:encoded><![CDATA[
<figure class="wp-block-pullquote"><blockquote><p><em class="">欢迎来到研究焦点，这是一系列博客文章，重点介绍 Microsoft 研究社区的著名出版物、活动、代码/数据集、新员工和其他里程碑。</em> </p></blockquote></figure><figure class="wp-block-image size-full"><img decoding="async" fetchpriority="high" width="1400" height="788" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1.png" alt="研究重点：2023 年 11 月 8 日，渐变图案背景" class="wp-image-981462" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1.png 1400w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-300x169.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-1024x576.png 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-768x432.png 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-1066x600.png 1066w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-655x368.png 655w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-343x193.png 343w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-240x135.png 240w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-640x360.png 640w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-960x540.png 960w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/RF28-BlogHeroFeature-1400x788-1-1280x720.png 1280w" sizes="(max-width: 1400px) 100vw, 1400px" /></figure><h3 class="wp-block-heading h6 has-blue-color has-text-color" id="new-research">新研究</h3><h2 class="wp-block-heading" id="hmd-nemo-online-3d-avatar-motion-generation-from-sparse-observations"> HMD-NeMo：根据稀疏观察生成在线 3D 头像运动</h2><p>生成合理且准确的全身化身运动对于在混合现实场景中创建高质量的沉浸式体验至关重要。头戴式设备 (HMD) 通常仅提供少量输入信号，例如头部和手部 6-DoF，或者刚体在三维空间中的六个运动自由度。最近的方法在仅给出头部和手部信号的情况下产生全身运动方面取得了令人印象深刻的性能。然而，所有已知的现有方法都依赖于全手可见性。例如，虽然使用运动控制器时就是这种情况，但相当一部分混合现实体验不涉及运动控制器，而是依赖于以自我为中心的手部跟踪。由于头戴式显示器的视野有限，这带来了部分手部可见性的挑战。</p><p>在最近的一篇论文： <a href="https://www.microsoft.com/en-us/research/publication/hmd-nemo-online-3d-avatar-motion-generation-from-sparse-observations/">HMD-NeMo：根据稀疏观察生成在线 3D 阿凡达运动中</a>，微软的研究人员提出了 HMD-NeMo，这是第一个统一的方法，即使在手可能仅部分可见的情况下，也可以解决合理且准确的全身运动生成问题。 HMD-NeMo 是一种轻量级神经网络，可以在线实时预测全身运动。 HMD-NeMo 的核心是一个时空编码器，具有新颖的时间适应性掩模标记，可在没有手部观察的情况下鼓励合理的运动。研究人员对 HMD-NeMo 中不同组件的影响进行了广泛的分析，并通过评估引入了 AMASS 上最先进的技术，AMASS 是一个大型人体运动数据库，统一了不同的基于光学标记的运动捕捉数据集。 </p><div class="wp-block-buttons is-content-justification-center"><div class="wp-block-button is-style-outline"> <a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/publication/hmd-nemo-online-3d-avatar-motion-generation-from-sparse-observations/">阅读论文</a></div></div><div class="border-bottom border-top border-gray-300 mt-5 mb-5 msr-promo text-center text-md-left alignwide" data-bi-aN="promo" data-bi-id="979236"><p class="msr-promo__label text-gray-800 text-center text-uppercase"><span class="px-4 bg-white display-inline-block font-weight-semibold small">微软研究播客</span></p><div class="row pt-3 pb-4 align-items-center"><div class="msr-promo__media col-12 col-md-5"> <a class="bg-gray-300" href="https://www.microsoft.com/en-us/research/podcast/whats-your-story-ranveer-chandra/" aria-label="What’s Your Story: Ranveer Chandra" data-bi-cN="What’s Your Story: Ranveer Chandra" target="_blank"><img decoding="async" class="w-100 display-block" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/10/Ravneer_Hero_Feature_1400x788.png" /></a></div><div class="msr-promo__content p-3 px-5 col-12 col-md"><h2 class="h4">你的故事是什么：兰维尔·钱德拉</h2><p class="large">您可能了解技术，但您对技术进步背后的人了解多少？ Ranveer Chandra 在#MSRPodcast“你的故事是什么”第一集中讲述了他在印度的成长经历、他在系统和网络方面的工作以及在工作中找到的乐趣。 </p><div class="wp-block-buttons justify-content-center justify-content-md-start"><div class="wp-block-button"> <a href="https://www.microsoft.com/en-us/research/podcast/whats-your-story-ranveer-chandra/" class="btn btn-brand glyph-append glyph-append-chevron-right" aria-label="Listen now" data-bi-cN="What’s Your Story: Ranveer Chandra" target="_blank">现在听</a></div></div></div><!--/.msr-promo__content--></div><!--/.msr-promo__inner-wrap--><span id="label-external-link" class="sr-only" aria-hidden="true">在新选项卡中打开</span></div><!--/.msr-promo--><h3 class="wp-block-heading h6 has-blue-color has-text-color" id="new-article">新文章</h3><h2 class="wp-block-heading" id="will-code-remain-a-relevant-user-interface-for-end-user-programming-with-generative-ai-models">代码是否仍然是使用生成式人工智能模型进行最终用户编程的相关用户界面？</h2><p>最终用户编程的研究领域主要关注帮助非专家学习足够好的编码以完成自己的任务。生成式人工智能允许用户根据自然语言提示生成代码，从而完全避免这种情况。</p><p>在最近的一篇文章中： <a href="https://www.microsoft.com/en-us/research/publication/will-code-remain-a-relevant-user-interface-for-end-user-programming-with-generative-ai-models/">代码仍然是使用生成式 AI 模型进行最终用户编程的相关用户界面吗？</a>微软的研究人员探索了在生成式人工智能世界中“传统”编程语言对于非专家最终用户程序员的相关性。他们提出了“生成转变假说”：生成人工智能将在传统的最终用户编程范围内实现定性和定量的扩展。他们概述了传统编程语言对于最终用户程序员仍然相关和有用的一些原因，并推测这些原因是否会随着生成人工智能的进一步改进和创新而持续存在或消失。最后，他们阐明了对最终用户编程研究的一系列影响，包括需要重新审视许多成熟的核心概念的可能性，例如 Ko 的学习障碍和 Blackwell 的注意力投资模型。 </p><div class="wp-block-buttons is-content-justification-center"><div class="wp-block-button is-style-outline"> <a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/publication/will-code-remain-a-relevant-user-interface-for-end-user-programming-with-generative-ai-models/">阅读论文</a></div></div><hr class="wp-block-separator has-alpha-channel-opacity is-style-dots"/><h3 class="wp-block-heading h6 has-blue-color has-text-color" id="new-research-1">新研究</h3><h2 class="wp-block-heading" id="lut-nn-empower-efficient-neural-network-inference-with-centroid-learning-and-table-lookup"> LUT-NN：通过质心学习和表查找实现高效的神经网络推理</h2><p>设备端深度神经网络（DNN）推理广泛应用于智能手机和智能手表等移动设备，提供了无与伦比的智能服务，但也强调了这些设备上有限的硬件资源。</p><p>在最近的一篇论文： <a href="https://www.microsoft.com/en-us/research/publication/lut-nn-empower-efficient-neural-network-inference-with-centroid-learning-and-table-lookup/">LUT-NN：通过质心学习和表查找增强高效神经网络推理中</a>，微软的研究人员提出了一种消耗更少延迟、内存、磁盘和电力的系统，以实现更高效的 DNN 推理。 LUT-NN 学习每个算子的典型特征（称为质心），并预先计算这些质心的结果以保存在查找表中。在推理过程中，可以直接从表中读取与输入最接近的质心的结果，作为无需计算的近似输出。</p><p> LUT-NN 集成了两项主要的新技术：（1）通过反向传播进行可微质心学习，它采用三个级别的近似来最小化质心对精度的影响； (2)查表推理执行，综合考虑不同级别的并行性、内存访问减少以及专用硬件单元以获得最佳性能。 </p><div class="wp-block-buttons is-content-justification-center"><div class="wp-block-button is-style-outline"> <a data-bi-type="button" class="wp-block-button__link wp-element-button" href="https://www.microsoft.com/en-us/research/publication/lut-nn-empower-efficient-neural-network-inference-with-centroid-learning-and-table-lookup/">阅读论文</a></div></div><span id="label-external-link" class="sr-only" aria-hidden="true">在新选项卡中打开</span><p><a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/research-focus-week-of-november-8-2023/">《研究焦点：2023 年 11 月 8 日一周》一文</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>;</content:encoded></item><item><title>致力于开发更快的算法来最小化子模函数</title><link/>https://www.microsoft.com/en-us/research/blog/toward-developing-faster-algorithms-for-minimizing-submodular-functions/<dc:creator><![CDATA[Brenda Potts]]></dc:creator><pubDate> Tue, 07 Nov 2023 17:00:00 +0000</pubDate><category><![CDATA[Research Blog]]></category><guid ispermalink="false"> https://www.microsoft.com/en-us/research/blog/toward-developing-faster-algorithms-for-minimizing-submodular-functions/ </guid><description><![CDATA[<p>这篇研究论文在 2023 年第 64 届 IEEE 计算机科学基础研讨会 (FOCS)（在新选项卡中打开）上发表，这是理论计算机科学最新研究的首要论坛。子模函数是多功能的数学工具，可以在现实场景中找到多种应用，并指导跨复杂领域的解决方案。通过剖析复杂的网络[…]</p><p> <a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/toward-developing-faster-algorithms-for-minimizing-submodular-functions/">《开发更快的算法来最小化子模函数》</a>一文首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>; </description><content:encoded><![CDATA[
<p class="has-text-align-center">这篇研究论文在<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://focs.computer.org/2023/" target="_blank" rel="noreferrer noopener"><strong><em>2023 年第 64<sup>届</sup>IEEE 计算机科学基础研讨会 (FOCS)</em></strong> <span class="sr-only">（在新选项卡中打开）</span></a><strong><em>上发表</em></strong><strong><em>，该研讨会是理论计算机科学最新研究的首要论坛。</em></strong> </p><figure class="wp-block-image size-large"><img decoding="async" width="1024" height="576" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-1024x576.jpg" alt="FOCS 2023 论文：开发更快的最小化子模函数算法" class="wp-image-980157" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-1024x576.jpg 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-300x169.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-768x432.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-1066x600.jpg 1066w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-655x368.jpg 655w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-343x193.jpg 343w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-240x135.jpg 240w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-640x360.jpg 640w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-960x540.jpg 960w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1-1280x720.jpg 1280w, https://www.microsoft.com/en-us/research/uploads/prod/2023/10/FOCS-BlogHeroFeature-1400x788-1.jpg 1400w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure><p>子模函数是多功能的数学工具，可以在现实场景中找到多种应用，并指导跨复杂领域的解决方案。从剖析错综复杂的图形网络到通过效用函数解读经济景观的复杂性，甚至通过熵函数探索随机变量的神秘世界，它们为解决具有挑战性的问题提供了宝贵的见解。它们广泛的适用性使其成为各种理论计算机科学领域（包括运筹学和博弈论）建模和优化的关键工具。近年来，子模函数在解决机器学习 (ML) 应用中的优化问题方面取得了突出的作用。这些任务涵盖特征选择和聚类等重要领域，如图 1 所示。此外，子模块函数在传感器放置和图形模型等应用中也很有用。为了进一步探索，比尔姆斯关于该主题的富有洞察力的<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://arxiv.org/pdf/2202.00132.pdf" target="_blank" rel="noreferrer noopener">调查<span class="sr-only">（在新选项卡中打开）</span></a>和巴赫的<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://www.di.ens.fr/~fbach/2200000039-Bach-Vol6-MAL-039.pdf" target="_blank" rel="noreferrer noopener">标准教科书<span class="sr-only">（在新选项卡中打开）</span></a>中提供了全面的资源。 </p><figure class="wp-block-image aligncenter size-full"><img decoding="async" width="600" height="200" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/11/FOCS-Blog_figure1v2.png" alt="两个图形。左图描述了特征选择的过程，从顶部的所有特征开始，然后未选择的特征在中间交叉，最后选定的特征保留在底部。右图显示了聚类的过程，其中一组二维点被分配不同的颜色，使得具有相同颜色的点在物理上彼此接近以形成一个聚类。" class="wp-image-981999" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/11/FOCS-Blog_figure1v2.png 600w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/FOCS-Blog_figure1v2-300x100.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/11/FOCS-Blog_figure1v2-240x80.png 240w" sizes="(max-width: 600px) 100vw, 600px" /><figcaption class="wp-element-caption">图 1. 子模块函数优化在特征选择（左侧）和聚类（右侧）中的应用。 </figcaption></figure><h2 class="wp-block-heading" id="algorithm-design-for-submodular-function-minimization">子模函数最小化算法设计</h2><p>在<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://focs.computer.org/2023/" target="_blank" rel="noreferrer noopener">FOCS <span class="sr-only">2023</span></a>上发表的与斯坦福大学研究人员联合发表的论文《 <a href="https://www.microsoft.com/en-us/research/publication/sparse-submodular-function-minimization/" target="_blank" rel="noreferrer noopener">稀疏子模函数最小化》（在新选项卡中<span class="sr-only">打开）</span></a> （在新选项卡中打开）中，我们研究了这个问题最小化标准模型中的子模函数。在这里，我们假设可以通过评估预言机访问子模函数，该评估预言机返回值 \( f(S) \) 以响应具有集合 \( S \) 的查询。这是研究最小化子模函数的算法设计的最经典且经过充分研究的模型。</p><p>在讨论我们的研究之前，重要的是要记住，子模函数 \( f \) 是在满足边际差异递减性质的有限元素集 \( V \) 的子集上定义的。也就是说，对于任意两个子集 \( S \subseteq T \) 和任意元素 \( e \in V \setminus T \)，当添加到较小集合 \( f(S \cup {e}) – f(S) \) 至少是 \( e \) 添加到更大集合 \( f(T \cup {e}) – f(T) \) 时的边际值。</p><p> 20 世纪 80 年代， <a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://link.springer.com/article/10.1007/BF02579273" target="_blank" rel="noreferrer noopener">基础工作<span class="sr-only">（在新选项卡中打开）</span></a>揭示了子模函数可以在多项式时间内最小化，这标志着一项重大突破。从那时起，研究人员在寻求更快的子模函数最小化（SFM）算法方面取得了实质性进展。尽管做出了这些努力，但基本问题仍然存在，例如确定最小化任何给定子模块函数所需的最小查询数（这个概念称为问题的查询复杂性）。</p><p>目前，最先进的算法需要对任何给定的子模函数进行 \( \widetilde{O}(n^2) \) 查询，而最佳下界仅为 \( \widetilde{\Omega}(n) \) ，其中 \(n\) 是定义子模函数的基集的大小。这种差异导致了巨大的差距，在现有的上限和下限之间留下了\(n\)倍的差异。</p><p>鉴于这种巨大的差异，一个自然的问题就出现了：哪些额外的结构假设可能为子模函数最小化（SFM）中更快的算法铺平道路？一种普遍的假设是稀疏性，它假设最小化子模函数的集合的大小很小。这在信号处理、特征选择和压缩感知等多种应用中具有特别的相关性。在这些场景中，解决方案预计会表现出稀疏的非零条目，因此了解算法复杂性如何取决于稀疏性非常重要，因为它提供了对问题的复杂组合和几何结构的见解。</p><p>有趣的是，过去四十年来为 SFM 开发的现有算法技术即使在解决方案稀疏的情况下也无法提高运行时间。因此，必须开发创新技术来推动稀疏 SFM 的进步并弥合上限和下限之间的现有差距。 </p><div class="border-bottom border-top border-gray-300 mt-5 mb-5 msr-promo text-center text-md-left alignwide" data-bi-aN="promo" data-bi-id="979236"><p class="msr-promo__label text-gray-800 text-center text-uppercase"><span class="px-4 bg-white display-inline-block font-weight-semibold small">微软研究播客</span></p><div class="row pt-3 pb-4 align-items-center"><div class="msr-promo__media col-12 col-md-5"> <a class="bg-gray-300" href="https://www.microsoft.com/en-us/research/podcast/whats-your-story-ranveer-chandra/" aria-label="What’s Your Story: Ranveer Chandra" data-bi-cN="What’s Your Story: Ranveer Chandra" target="_blank"><img decoding="async" class="w-100 display-block" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/10/Ravneer_Hero_Feature_1400x788.png" /></a></div><div class="msr-promo__content p-3 px-5 col-12 col-md"><h2 class="h4">你的故事是什么：兰维尔·钱德拉</h2><p class="large">您可能了解技术，但您对技术进步背后的人了解多少？ Ranveer Chandra 在#MSRPodcast“你的故事是什么”第一集中讲述了他在印度的成长经历、他在系统和网络方面的工作以及在工作中找到的乐趣。 </p><div class="wp-block-buttons justify-content-center justify-content-md-start"><div class="wp-block-button"> <a href="https://www.microsoft.com/en-us/research/podcast/whats-your-story-ranveer-chandra/" class="btn btn-brand glyph-append glyph-append-chevron-right" aria-label="Listen now" data-bi-cN="What’s Your Story: Ranveer Chandra" target="_blank">现在听</a></div></div></div><!--/.msr-promo__content--></div><!--/.msr-promo__inner-wrap--><span id="label-external-link" class="sr-only" aria-hidden="true">在新选项卡中打开</span></div><!--/.msr-promo--><h2 class="wp-block-heading" id="parallel-algorithms-for-submodular-function-minimization">子模函数最小化的并行算法</h2><p>除了探索 SFM 的查询复杂性之外，最近的研究揭示了稀疏 SFM 的重要性，特别是在理解旨在解决问题的并行算法（称为<em>并行复杂性</em>）的固有适应性方面。研究表明，任何 SFM 并行算法都需要最小自适应性，该自适应性是地面集大小的多项式。</p><p>我们的结果改进了 SFM 的并行和顺序算法。例如，考虑给定子模函数的最小值为 \(\widetilde{O}(1)\) 稀疏的场景。在这种情况下，我们的并行算法以几乎恒定的轮数运行，而我们的顺序算法则进行几乎线性数量的查询。这一成就与之前的最佳并行上限 \(\widetilde{O}(n)\) 和最佳查询复杂度上限 \(\widetilde{O}(n^2)\) 形成鲜明对比。 </p><h2 class="wp-block-heading" id="fast-first-order-methods-for-exact-submodular-function-minimization">精确子模函数最小化的快速一阶方法</h2><p>当前的 SFM 快速算法依赖于割平面方法，这是一种应用于 Lovász 扩展的标准类凸优化技术——给定子模函数的自然连续扩展。然而，将优化域限制为稀疏解并不会显着加快剖切面方法超出对数因子的速度。为了解决这个问题，我们改变了方法并采用一阶方法，包括随机镜像下降，以最小化 Lovász 扩展。这些方法是随机梯度下降的非欧几里得推广，更适合问题几何。与割平面方法不同，一阶方法表现出多项式收敛速度，而不是对最佳解的加性误差的多对数依赖性。</p><p>这种收敛速度表明一阶方法更适合<em>近似</em>子模函数最小化，而我们的目标是<em>精确</em>求解它。利用稀疏性假设，我们基于新的对偶概念开发了一种新的 SFM 算法框架。我们使用该框架来演示如何应用一阶方法（精度要求大幅降低）来精确求解 SFM。</p><h2 class="wp-block-heading" id="toward-faster-algorithms-for-sfm-and-its-applications">为 SFM 及其应用开发更快的算法</h2><p>这些技术不仅有望推动稀疏 SFM 的进步，而且还为解决 SFM 理论中的其他基本问题提供了基础。我们的稀疏 SFM 算法可以作为设计相关问题改进算法的宝贵起点。它们为开发具有较低查询和并行复杂性的 SFM 多项式时间算法提供了潜在的见解，为未来的研究开辟了途径。</p><p>传统上，在过去的四十年中，子模函数最小化的研究主要集中在问题的全局属性上。相比之下，稀疏 SFM 使我们能够探索子模函数的局部且更精细的结构。我们的工作引入了新的算法工具，可以更好地利用这些结构属性，这是机器学习和运筹学应用的一个重要方面，因为这些领域通常具有特殊的结构。除了推进稀疏 SFM 之外，我们的范式还为 SFM 及其多样化应用的增强算法的开发铺平了道路。</p><span id="label-external-link" class="sr-only" aria-hidden="true">在新选项卡中打开</span><p><a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/toward-developing-faster-algorithms-for-minimizing-submodular-functions/">《开发更快的算法来最小化子模函数》</a>一文首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>;</content:encoded></item></channel></rss>