<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:wfw="http://wellformedweb.org/CommentAPI/"><channel><title>微软研究院博客 - 微软研究院</title><atom:link href="https://www.microsoft.com/en-us/research/blog/feed/?from=https%3A%2F%2Fresearch.microsoft.com%2Frss%2Fnews.xml&amp;type=rss" rel="self" type="application/rss+xml"></atom:link><link/> https://www.microsoft.com/en-us/research/blog/<description></description><lastbuilddate> 2024 年 3 月 18 日星期一 21:04:00 +0000</lastbuilddate><language> en-US</language><sy:updateperiod>每小时</sy:updateperiod><sy:updatefrequency>1</sy:updatefrequency><generator> https://wordpress.org/?v=6.4.3</generator><item><title> Garnet 简介 – 一种开源、下一代、更快的缓存存储，用于加速应用程序和服务</title><link/>https://www.microsoft.com/en-us/research/blog/introducing-garnet-an-open-source-next- Generation-faster-cache-store-for-acceleating-applications-and-services/<dc:creator><![CDATA[Alyssa Hughes]]></dc:creator><pubDate> Mon, 18 Mar 2024 21:03:58 +0000</pubDate> <category><![CDATA[Research Blog]]></category><guid ispermalink="false"></guid><description><![CDATA[<p> Garnet 是一种缓存存储系统，可满足日益增长的数据存储需求，以支持交互式 Web 应用程序和服务。 Garnet 与传统缓存存储相比具有多种优势，现在可以开源下载。</p><p>这篇文章<a href="https://www.microsoft.com/en-us/research/blog/introducing-garnet-an-open-source-next-generation-faster-cache-store-for-accelerating-applications-and-services/">介绍 Garnet – 一种用于加速应用程序和服务的开源、下一代、更快的缓存存储</a>首先出现在<a href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>; </description><content:encoded><![CDATA[
<figure class="wp-block-image size-full"><img fetchpriority="high" decoding="async" width="1400" height="788" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1.jpg" alt="石榴石色钻石"Rich and Extensible API" at the top, "Memory + Tiered Storage" and "Cluster Mode" to the right, "Ultra-Low Latency Pluggable Network Layer" and "Fast Checkpointing & Logging" on the bottom, "Bare Metal Performance" and "Works Everywhere" to the left." class="wp-image-1011708" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1.jpg 1400w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1-300x169.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1-1024x576.jpg 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1-768x432.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1-1066x600.jpg 1066w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1-655x368.jpg 655w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1-240x135.jpg 240w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1-640x360.jpg 640w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1-960x540.jpg 960w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet-BlogHeroFeature-1400x788-1-1280x720.jpg 1280w" sizes="(max-width: 1400px) 100vw, 1400px" /></figure><p> Microsoft 的研究人员近十年来一直致力于满足对数据存储机制日益增长的需求，以支持交互式 Web 应用程序和服务的快速发展。我们的新缓存存储系统称为 Garnet，与传统缓存存储相比具有多种优势，已部署在 Microsoft 的多个用例中，例如 Windows 和 Web 体验平台、Azure 资源管理器和 Azure 资源图，以及现在可以在<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://github.com/microsoft/garnet" target="_blank" rel="noreferrer noopener">https://github.com/microsoft/garnet <span class="sr-only">（在新选项卡中打开）</span></a>上进行开源下载。在开源 Garnet 中，我们希望使开发人员社区能够从其性能提升和功能中受益，以我们的工作为基础，并通过添加新的 API 调用和功能来扩展 Garnet 生态系统。我们还希望开源能够鼓励后续学术研究并在这一重要研究领域开启未来的合作机会。</p><h2 class="wp-block-heading" id="the-cache-store-problem">缓存存储问题</h2><p>云和边缘计算的增长带来了数量和范围不断增加的应用程序和服务，它们需要比以往更高的效率、更低的延迟和更低的成本来访问、更新和转换数据。这些应用程序和服务通常需要在存储交互方面投入大量运营支出，使其成为当今最昂贵和最具挑战性的平台领域之一。作为单独可扩展的远程进程部署的缓存存储软件层可以降低这些成本并提高应用程序性能。这推动了缓存存储行业的发展，其中包括许多开源系统，例如 Redis、Memcached、KeyDB 和 Dragonfly。</p><p>与支持简单获取/设置接口的传统远程缓存存储不同，现代缓存提供丰富的 API 和功能集。它们支持原始字符串、Hyperloglog 等分析数据结构以及排序集和哈希等复杂数据类型。它们允许用户检查点和恢复缓存、创建数据分片、维护复制副本以及支持事务和自定义扩展。</p><p>然而，现有系统通过保持系统设计简单来实现这种功能丰富性，但付出了一定的代价，这限制了充分利用最新硬件功能（例如，多核、分层存储、快速网络）的能力。此外，其中许多系统并未明确设计为易于应用程序开发人员扩展或在不同平台和操作系统上良好运行。</p><h2 class="wp-block-heading" id="introducing-garnet">石榴石简介</h2><p>在 Microsoft Research，我们自 2016 年以来一直在研究现代键值数据库架构。我们之前的工作是<a href="https://www.microsoft.com/en-us/research/uploads/prod/2018/03/faster-sigmod18.pdf" target="_blank" rel="noreferrer noopener">FASTER <span class="sr-only">（在新选项卡中打开）</span></a>嵌入式键值库，我们于 2018 年<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://github.com/microsoft/FASTER" target="_blank" rel="noreferrer noopener">开源<span class="sr-only">（在新选项卡中打开）</span></a> ，展示了性能比现有系统好几个数量级，同时专注于简单的单节点进程内键值模型。</p><p>从 2021 年开始，根据 Microsoft 用例的要求，我们开始构建一个新的远程缓存存储，其中包含所有必要的功能，以作为现有缓存存储的可行替代方案。我们的挑战是保持和增强我们在早期工作中取得的性能优势，但在这个更普遍和更现实的网络环境中。</p><p>这项工作的成果是 Garnet——一种新的缓存存储，它具有以下几个独特的优点：</p><ul><li> Garnet 采用流行的 RESP 线路协议作为起点，这使得可以从当今大多数编程语言中可用的未经修改的 Redis 客户端使用 Garnet。</li><li> Garnet 通过许多客户端连接和小批量提供更好的可扩展性和吞吐量，从而节省大型应用程序和服务的成本。</li><li> Garnet 在第 99<sup>个</sup>和 99.9<sup>个</sup>百分位处表现出更好的客户端延迟，这对于现实场景至关重要。</li><li> Garnet 基于最新的 .NET 技术，具有跨平台、可扩展和现代化的特点。它被设计为易于开发和发展，而不会牺牲常见情况下的性能。我们利用 .NET 丰富的库生态系统来扩展 API，并提供开放的优化机会。由于我们对 .NET 的精心使用，Garnet 在 Linux 和 Windows 上都实现了最先进的性能。 </li></ul><figure class="wp-block-image aligncenter size-full"><img decoding="async" width="362" height="271" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_intro.png" alt="石榴石色钻石"Rich and Extensible API" at the top, "Memory + Tiered Storage" and "Cluster Mode" to the right, "Ultra-Low Latency Pluggable Network Layer" and "Fast Checkpointing & Logging" on the bottom, "Bare Metal Performance" and "Works Everywhere" to the left." class="wp-image-1011471" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_intro.png 362w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_intro-300x225.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_intro-360x271.png 360w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_intro-80x60.png 80w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_intro-240x180.png 240w" sizes="(max-width: 362px) 100vw, 362px" /></figure><p> <strong>API 功能：</strong> Garnet 支持广泛的 API，包括前面描述的原始字符串、分析和对象操作。它还实现了具有分片、复制和动态密钥迁移的集群模式。 Garnet 支持客户端<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://redis.io/docs/interact/transactions/" target="_blank" rel="noreferrer noopener">RESP 事务<span class="sr-only">（在新选项卡中打开）</span></a>形式的事务和我们自己的 C# 服务器端存储过程，并允许用户在原始字符串和新对象类型上定义自定义操作，所有这些都可以方便地使用 C# ，导致开发自定义扩展的门槛降低。</p><p><strong>网络、存储、集群功能：</strong> Garnet 使用快速且可插拔的网络层，支持未来的扩展，例如利用内核旁路堆栈。它支持安全传输层安全 (TLS) 通信以及基本访问控制。 Garnet 的存储层称为 Tsavorite，是从 OSS FASTER 分叉出来的，包括强大的数据库功能，例如线程可扩展性、分层存储支持（内存、SSD 和云存储）、快速非阻塞<a href="https://www.microsoft.com/en-us/research/uploads/prod/2019/01/cpr-sigmod19.pdf" target="_blank" rel="noreferrer noopener">检查点</a>、恢复、持久性操作日志记录、多-密钥事务支持，以及更好的内存管理和重用。最后，Garnet 支持集群操作模式——稍后会详细介绍。</p><h2 class="wp-block-heading" id="performance-preview">性能预览</h2><p>我们展示了将 Garnet 与领先的开源缓存存储进行比较的一些关键结果。更详细的性能比较可以在我们的网站<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://microsoft.github.io/garnet/" target="_blank" rel="noreferrer noopener">https://microsoft.github.io/garnet/ <span class="sr-only">（在新选项卡中打开）</span></a>上找到。</p><p>我们预配两个运行 Linux (Ubuntu 20.04) 的 Azure 标准 F72s v2 虚拟机（每个虚拟机 72 个 vcpu，144 GiB 内存），并启用加速 TCP。一台机器运行不同的缓存存储服务器，另一台机器专门用于发布工作负载。我们使用自己的基准测试工具，称为<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://github.com/microsoft/Garnet/tree/main/benchmark/Resp.benchmark" target="_blank" rel="noreferrer noopener">Resp.benchmark <span class="sr-only">（在新选项卡中打开）</span></a>来生成所有结果。我们将 Garnet 与<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://redis.io/" target="_blank" rel="noreferrer noopener">Redis <span class="sr-only">（在新选项卡中打开）</span></a> (v7.2)、 <a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://docs.keydb.dev/" target="_blank" rel="noreferrer noopener">KeyDB <span class="sr-only">（在新选项卡中打开）</span></a> (v6.3.4) 和<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://www.dragonflydb.io/" target="_blank" rel="noreferrer noopener">Dragonfly <span class="sr-only">（在新选项卡中打开）</span></a> (v6.2.11) 的最新开源版本进行比较。我们在这些实验中使用均匀随机分布的密钥（Garnet 的共享内存设计对于倾斜的工作负载来说更加有利）。在这些实验中，数据被预先加载到每台服务器上，并适合内存中。 </p><h3 class="wp-block-heading" id="experiment-1-throughput-with-varying-number-of-client-sessions">实验 1：不同数量的客户端会话的吞吐量</h3><p>我们从大批量 GET 操作（每批 4096 个请求）和小负载（8 字节键和值）开始，以最大限度地减少网络开销，并在增加客户端会话数量时比较系统。从图 1 中我们看到，Garnet 表现出比 Redis 和 KeyDB 更好的可扩展性，同时实现了比所有三个基线系统更高的吞吐量（y 轴是对数刻度）。请注意，虽然 Dragonfly 显示出与 Garnet 类似的缩放行为，但它是一个纯粹的内存系统。此外，当数据库大小（即预加载的不同键的数量）明显大于处理器缓存所能容纳的大小（2.56 亿个键）时，Garnet 相对于其他系统的吞吐量仍然很强。</p><figure class="wp-block-image aligncenter size-full"> <a href="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig1.png"><img decoding="async" width="1920" height="622" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig1.png" alt="两个簇状柱形图比较了数据库大小分别为 1024 个键和 2.56 亿个键的各种系统（Garnet、Redis、KeyDB 和 Dragonfly）的吞吐量（对数尺度）。 x 轴表示客户端会话数量从 1 到 128。随着客户端会话数量的增加，Garnet 的吞吐量显着提高。" class="wp-image-1011504" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig1.png 1920w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig1-300x97.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig1-1024x332.png 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig1-768x249.png 768w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig1-1536x498.png 1536w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig1-240x78.png 240w" sizes="(max-width: 1920px) 100vw, 1920px" /></a><figcaption class="wp-element-caption">图 1：数据库大小为 (a) 1024 个键和 (b) 2.56 亿个键时的吞吐量（对数尺度）、不同数量的客户端会话</figcaption></figure><h3 class="wp-block-heading" id="experiment-2-throughput-with-varying-batch-sizes">实验 2：不同批量大小的吞吐量</h3><p>接下来，我们使用 GET 操作和固定数量 (64) 的客户端会话来改变批量大小。我们像以前一样尝试两种不同的数据库大小。图 2 显示，即使没有批处理，Garnet 也能表现更好，而且即使批处理规模非常小，差距也会增大。有效负载大小与以前相同。同样，y 轴是对数刻度。</p><figure class="wp-block-image aligncenter size-full"> <a href="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig2.png"><img loading="lazy" decoding="async" width="2506" height="914" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig2.png" alt="两个簇状柱形图比较了数据库大小分别为 1024 个键和 2.56 亿个键的各种系统（Garnet、Redis、KeyDB 和 Dragonfly）的吞吐量（对数尺度）。 x 轴的批量大小从 1 到 4096 不等。即使是小批量，Garnet 的吞吐量也能显着受益。" class="wp-image-1011516" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig2.png 2506w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig2-300x109.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig2-1024x373.png 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig2-768x280.png 768w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig2-1536x560.png 1536w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig2-2048x747.png 2048w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig2-240x88.png 240w" sizes="(max-width: 2506px) 100vw, 2506px" /></a><figcaption class="wp-element-caption">图 2：数据库大小为 (a) 1024 个键和 (b) 2.56 亿个键时的吞吐量（对数规模）、不同的批量大小</figcaption></figure><h3 class="wp-block-heading" id="experiment-3-latency-with-varying-number-of-client-sessions">实验 3：不同数量的客户端会话的延迟</h3><p>接下来我们测量各种系统的客户端延迟。图 3 显示，随着我们增加客户端会话数量，与其他系统相比，Garnet 在各个百分位的延迟（以微秒为单位）保持更加稳定和更低。在这里，我们混合发出 80% GET 和 20% SET 操作，没有操作批处理。</p><figure class="wp-block-image aligncenter size-full"> <a href="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig3.png"><img loading="lazy" decoding="async" width="3518" height="914" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig3.png" alt="三个簇状柱形图比较了各种系统（Garnet、Redis、KeyDB 和 Dragonfly）的延迟，分别为中值、第 99 个百分位数和第 99.9 个百分位数。 x 轴将客户端会话数量从 1 变化到 128，不进行批处理，操作混合为 80% GET 和 20% SET。 Garnet 的延迟表现稳定，总体上总体较低。" class="wp-image-1011528" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig3.png 3518w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig3-300x78.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig3-1024x266.png 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig3-768x200.png 768w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig3-1536x399.png 1536w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig3-2048x532.png 2048w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig3-240x62.png 240w" sizes="(max-width: 3518px) 100vw, 3518px" /></a><figcaption class="wp-element-caption">图 3：延迟、不同数量的客户端会话（a）中值、（b）第 99<sup>个</sup>百分位和（c）第 99.9<sup>个</sup>百分位</figcaption></figure><h3 class="wp-block-heading" id="experiment-4-latency-with-varying-batch-sizes">实验 4：不同批量大小的延迟</h3><p>Garnet 的延迟针对自适应客户端批处理和查询系统的许多会话进行了优化。我们将批量大小从 1 增加到 64，并在下面绘制了具有 128 个活动客户端连接的不同百分位数的延迟。我们在图 4 中看到，Garnet 的延迟全面较低。和以前一样，我们混合发出 80% 的 GET 和 20% 的 SET 操作。</p><figure class="wp-block-image aligncenter size-full"> <a href="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig4.png"><img loading="lazy" decoding="async" width="3529" height="914" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig4.png" alt="三个簇状柱形图比较了各种系统（Garnet、Redis、KeyDB 和 Dragonfly）的延迟，分别为中值、第 99 个百分位数和第 99.9 个百分位数。 x 轴的批处理大小从 1 到 64 不等，连接了 128 个客户端会话，操作混合为 80% GET 和 20% SET。 Garnet 的延迟表现稳定，总体上总体较低。" class="wp-image-1011531" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig4.png 3529w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig4-300x78.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig4-1024x265.png 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig4-768x199.png 768w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig4-1536x398.png 1536w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig4-2048x530.png 2048w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Garnet_Fig4-240x62.png 240w" sizes="(max-width: 3529px) 100vw, 3529px" /></a><figcaption class="wp-element-caption">图 4：不同批量大小下的延迟（a）中值、（b）第 99<sup>个</sup>百分位和（c）第 99.9 个<sup>百分</sup>位</figcaption></figure><h2 class="wp-block-heading" id="other-experiments">其他实验</h2><p>我们还尝试了其他功能和操作类型，发现 Garnet 具有良好的性能和扩展性。我们的<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://microsoft.github.io/garnet/docs" target="_blank" rel="noreferrer noopener">文档<span class="sr-only">（在新选项卡中打开）</span></a>提供了更多详细信息，包括如何运行这些实验，以便您可以看到自己的用例的好处。</p><h2 class="wp-block-heading" id="garnet-s-design-highlights">石榴石的设计亮点</h2><p>Garnet 的设计重新思考了整个缓存存储堆栈——从网络上接收数据包，到解析和处理数据库操作，再到执行存储交互。我们建立在多年研究的基础上，在过去十年中发表了 10 多篇研究论文。图5展示了Garnet的整体架构。我们在下面重点介绍一些关键想法。</p><p> Garnet 的网络层继承了受我们之前对<a href="https://www.microsoft.com/en-us/research/publication/achieving-high-throughput-and-elasticity-in-a-larger-than-memory-store/">ShadowFax</a>研究启发的共享内存设计。 TLS 处理和存储交互在 IO 完成线程上执行，避免了常见情况下的线程切换开销。这种方法允许 CPU 缓存一致性将数据传输到网络，而不是传统的基于随机播放的设计，后者需要在服务器上移动数据。 </p><figure class="wp-block-image aligncenter size-full is-resized"><img loading="lazy" decoding="async" width="2532" height="2560" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Figure-5-scaled.jpg" alt="Garnet的整体架构。显示通过解析和 API 实现层的多个网络会话。存储API转化为存储层的读、更新插入、删除、读-修改-写操作。存储由主存储和对象存储组成，它们都输入统一的操作日志。日志可以转发到远程副本。" class="wp-image-1011537" style="width:610px;height:auto" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Figure-5-scaled.jpg 2532w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Figure-5-297x300.jpg 297w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Figure-5-1013x1024.jpg 1013w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Figure-5-768x777.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Figure-5-1519x1536.jpg 1519w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Figure-5-2025x2048.jpg 2025w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/Figure-5-178x180.jpg 178w" sizes="(max-width: 2532px) 100vw, 2532px" /><figcaption class="wp-element-caption">图5：Garnet整体架构</figcaption></figure><p>Garnet的存储设计由两个Tsavorite键值存储组成，它们的命运由统一的操作日志绑定。第一个存储称为“主存储”，针对原始字符串操作进行了优化，并仔细管理内存以避免垃圾收集。第二个也是可选的“对象存储”针对复杂对象和自定义数据类型进行了优化，包括排序集、集合、哈希、列表和地理等流行类型。对象存储中的数据类型利用 .NET 库生态系统来实现其当前的实现。它们存储在内存中的堆上（这使得更新非常高效）并以序列化形式存储在磁盘上。未来，我们计划研究使用统一的索引和日志来简化维护。</p><p> Garnet 设计的一个显着特点是其窄腰 Tsavorite 存储 API，用于在顶部实现大型、丰富且可扩展的 RESP API 表面。该 API 包含读取、更新插入、删除和原子读取-修改-写入操作，通过 Garnet 的异步回调实现，以便在每个操作期间的各个点插入逻辑。我们的存储 API 模型使我们能够将 Garnet 的解析和查询处理问题与并发、存储分层和检查点等存储细节完全分开。</p><p> Garnet 进一步增加了对基于两阶段锁定的多密钥交易的支持。可以使用 RESP 客户端事务 (MULTI/EXEC) 或使用 C# 中的服务器端事务存储过程。</p><h2 class="wp-block-heading" id="cluster-mode">集群模式</h2><p>除了单节点执行之外，Garnet还支持集群模式，允许用户创建和管理分片和复制部署。 Garnet 还支持高效、动态的密钥迁移方案来重新平衡分片。用户可以使用标准的Redis集群命令来创建和管理Garnet集群，节点执行gossip来共享和演化集群状态。总的来说，Garnet 的簇模式是一个庞大且不断发展的功能，我们将在后续文章中介绍更多细节。</p><h2 class="wp-block-heading" id="looking-ahead">展望未来</h2><p>由于 Garnet 会部署在其他场景中，我们将在以后的文章中继续分享这些详细信息。我们还期待继续为 Garnet 添加新功能和改进，并与开源社区合作。</p><h3 class="wp-block-heading" id="project-contributors">项目贡献者</h3><p><strong>石榴石核心：</strong> <a href="https://www.microsoft.com/en-us/research/people/badrishc/">Badrish Chandramouli</a> 、 <a href="https://www.microsoft.com/en-us/research/people/vazois/">Vasileios Zois</a> 、 <a href="https://www.microsoft.com/en-us/research/people/lumaas/">Lukas Maas</a> 、Ted Hart、Gabriela Martinez Sanchez、 <a href="https://www.microsoft.com/en-us/research/people/yrajas/">Yoganand Rajasekaran</a> 、 <a href="https://www.microsoft.com/en-us/research/people/talzacc/">Tal Zaccai</a> 、 <a href="https://www.microsoft.com/en-us/research/people/darrenge/">Darren Gehring</a> 、 <a href="https://www.microsoft.com/en-us/research/people/irinasp/">Irina Spiridonova</a> 。</p><p><strong>合作者：</strong> Alan Yang、Pradeep Yadav、Alex Dubinkov、Venugopal Latchupatulla、 <a href="https://www.microsoft.com/en-us/research/people/knutmr/">Knut Magne Risvik</a> 、Sarah Williamson、Narayanan Subramanian、Saurabh Singh、Padmanabh Gupta、Sajjad Rahnama、Reuben Bond、 <a href="https://www.microsoft.com/en-us/research/people/raaboulh/">Rafah Hosn</a> 、 <a href="https://www.microsoft.com/en-us/research/people/surajitc/">Surajit Chaudhuri</a> 、 <a href="https://www.microsoft.com/en-us/research/people/johannes/">Johannes Gehrke</a>等。</p><span id="label-external-link" class="sr-only" aria-hidden="true">在新选项卡中打开</span><p>这篇文章<a href="https://www.microsoft.com/en-us/research/blog/introducing-garnet-an-open-source-next-generation-faster-cache-store-for-accelerating-applications-and-services/">介绍 Garnet – 一种开源、下一代、更快的缓存存储，用于加速应用程序和服务，</a>首先出现在<a href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>;</content:encoded></item><item><title>探索背景、文化和性格在头像研究中的重要性</title><link/>https://www.microsoft.com/en-us/research/blog/exploring-how-context-culture-and-character-matter-in-avatar-research/<dc:creator><![CDATA[Brenda Potts]]></dc:creator><pubDate> Mon, 18 Mar 2024 16:00:00 +0000</pubDate> <category><![CDATA[Research Blog]]></category><guid ispermalink="false"></guid><description><![CDATA[<p>随着虚拟形象在数字空间中的使用不断扩大，需要进步才能更好地代表所有人。了解对低现实场景和高现实场景中面部动画故障的不同感知的研究如何支持这一目标。</p><p> <a href="https://www.microsoft.com/en-us/research/blog/exploring-how-context-culture-and-character-matter-in-avatar-research/">探索虚拟形象研究中的背景、文化和性格的重要性一文</a>首先出现在<a href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>; </description><content:encoded><![CDATA[
<p class="has-text-align-center">这篇研究论文在<a class="msr-external-link glyph-append glyph-append-open-in-new-tab glyph-append-xsmall" href="https://anivae.fhstp.ac.at/" target="_blank" rel="noreferrer noopener"><strong><em>IEEE VR 虚拟和增强环境动画研讨会系列</em></strong><span class="sr-only">（在新选项卡中打开）</span></a> (ANIVAE 2024)<strong><em>上发表</em></strong><strong><em>，这是关于扩展现实中模拟训练的 3D 内容创建的首要系列。</em></strong> </p><figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="1400" height="788" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1.jpg" alt="带有论文特色的 IEEE 会议徽标"Ecological Validity and the Evaluation of Avatar Facial Animation Noise" " class="wp-image-1011060" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1.jpg 1400w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1-300x169.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1-1024x576.jpg 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1-768x432.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1-1066x600.jpg 1066w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1-655x368.jpg 655w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1-240x135.jpg 240w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1-640x360.jpg 640w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1-960x540.jpg 960w, https://www.microsoft.com/en-us/research/uploads/prod/2024/03/ANIVAE-BlogHeroFeature-1400x788-1-1280x720.jpg 1280w" sizes="(max-width: 1400px) 100vw, 1400px" /></figure><p>面对面的交流正在发生变化，超越了物理交互，包括视频会议和 AR/VR 平台，其中参与者由化身代表。通过运动跟踪实现动画的复杂化身可以真实地描绘人类对应物，但它们也可能受到抖动和失真等<em>噪声的</em>影响，从而降低了真实感。动作捕捉技术的进步旨在减少此类问题，但由于需要先进的组件，因此开发成本更高，并且需要额外的时间。虽然一些噪音是不可避免的，但确定可接受的类型和水平对于有效开发 AR/VR 设备和化身并将其推向市场非常重要。此外，了解噪音如何影响基于化身的通信对于创建更具包容性的化身至关重要，这些化身可以准确地代表不同的文化和能力，从而增强用户体验。</p><p>在 ANIVAE 2024 上发表的论文“ <a href="https://www.microsoft.com/en-us/research/publication/ecological-validity-and-the-evaluation-of-avatar-facial-animation-noise/">生态有效性和阿凡达面部动画噪声的评估</a>”中，我们探讨了在没有标准化方法的情况下评估阿凡达噪声的挑战。传统方法向参与者提供孤立的面部动画噪声来测量感知阈值，无法反映现实生活中的化身交互。我们的方法强调<em>生态有效性</em>——实验模拟现实世界条件的程度——作为评估化身噪音的核心。我们发现这显着影响了参与者对化身的反应，突出了环境对噪音感知的影响。我们的目标是通过开发更好地代表实际体验的噪声评估方法来提高化身的接受度、包容性和沟通能力。</p><h2 class="wp-block-heading" id="seeing-the-big-picture">纵观全局</h2><p>为了开展我们的研究，我们使用动作捕捉为两个化身设置了动画，如图 1 (A) 所示。我们录制了两名专业演员的表演，他们扮演建筑师和客户之间讨论房屋装修并检查拟议设计的 3D 模型的场景。我们使用了两个专有角色作为头像，他们的脸部通过 91 种表情混合形状进行动画处理。这允许广泛的面部表情和情感的微妙变化，有助于制作更逼真的动画。为了研究不同的动态，我们创建了场景的六种变体，改变了角色的性别、角色以及他们是否同意改造计划。 </p><figure class="wp-block-image aligncenter size-full"><img loading="lazy" decoding="async" width="800" height="204" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/02/ANNIVAETeaser_800px.jpg" alt="图 1：A. 实验社交互动场景的动作捕捉。 B. 动作捕捉被重新映射到风格化的化身。 C. 参与者佩戴 HoloLens 2 体验现场，并在平板电脑应用程序上回答问题。 D. 虚拟人物的面部特征因不同类型的不同严重程度的动画噪音而退化。" class="wp-image-1009116" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2024/02/ANNIVAETeaser_800px.jpg 800w, https://www.microsoft.com/en-us/research/uploads/prod/2024/02/ANNIVAETeaser_800px-300x77.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2024/02/ANNIVAETeaser_800px-768x196.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2024/02/ANNIVAETeaser_800px-240x61.jpg 240w" sizes="(max-width: 800px) 100vw, 800px" /><figcaption class="wp-element-caption">图 1：A. 实验社交互动场景的动作捕捉。 B. 动作捕捉被重新映射到风格化的化身。 C. 参与者佩戴 HoloLens 2 体验现场，并在平板电脑应用程序上回答问题。 D. 虚拟人物的面部特征因不同类型的不同严重程度的动画噪音而退化。</figcaption></figure><p> 56 名参与者进行了两项实验，以评估噪声对头像面部动画的影响。第一个实验的生态有效性较低。参与者通过<a href="https://www.microsoft.com/en-us/hololens" target="_blank" rel="noreferrer noopener">Microsoft HoloLens 2</a>设备观看对话片段，并使用滑块将任何噪音调整到可接受的水平。第二个实验具有很高的生态有效性，在完整的社会背景下展示了场景。在这里，参与者使用 HoloLens 2 来判断面部表情中的噪音对于对话“合适”或“不合适”。与第一个实验相反，该方法考虑了背景、文化和性格的社会方面。</p><p>结果表明，当参与者观看整个场景时，噪音不会分散注意力，这表明在高生态有效性场景中对噪音的容忍度更高。另一方面，孤立的剪辑会导致面部动画噪音更大的烦恼，这表明社会背景比超现实动画更重要。</p><p>文化观察表明，噪音感知受到隐性文化规范的影响，特别是在性别角色和共识水平方面。例如，在第二个实验中，参与者在更大的社会背景（高生态有效性）中观看对话，当女性建筑师同意男性客户时，噪音被认为是“适当的”，而当她不同意时，噪音被认为是“不适当的”，揭示了潜在的性别在颠倒的性别角色中没有观察到偏见。这些发现强调了在实验中应用高生态有效性来揭示社会文化对化身感知的影响的重要性。他们还强调在头像设计中需要仔细考虑背景和文化动态。</p><p>最后，我们探讨了同理心的性格特征。共情分数较低的参与者在上下文丰富的场景中对噪音更加挑剔。这表明，仅关注低生态有效性的实验可能会忽略关于同理心如何影响对头像面部动画噪音的反应的重要见解。 </p><div class="border-bottom border-top border-gray-300 mt-5 mb-5 msr-promo text-center text-md-left alignwide" data-bi-aN="promo" data-bi-id="1002645"><p class="msr-promo__label text-gray-800 text-center text-uppercase"><span class="px-4 bg-white display-inline-block font-weight-semibold small">焦点：人工智能驱动的体验</span></p><div class="row pt-3 pb-4 align-items-center"><div class="msr-promo__media col-12 col-md-5"> <a class="bg-gray-300" href="https://aka.ms/research-copilot/?OCID=msr_researchforum_Copilot_MCR_Blog_Promo" aria-label="Microsoft research copilot experience" data-bi-cN="Microsoft research copilot experience" target="_blank"><img decoding="async" class="w-100 display-block" src="https://www.microsoft.com/en-us/research/uploads/prod/2024/01/MSR-Chat-Promo.png" alt="" /></a></div><div class="msr-promo__content p-3 px-5 col-12 col-md"><h2 class="h4">微软研究院副驾驶经历</h2><p class="large">通过我们的人工智能体验，了解有关 Microsoft 研究的更多信息</p><div class="wp-block-buttons justify-content-center justify-content-md-start"><div class="wp-block-button"> <a href="https://aka.ms/research-copilot/?OCID=msr_researchforum_Copilot_MCR_Blog_Promo" class="btn btn-brand glyph-append glyph-append-chevron-right" aria-label="Microsoft research copilot experience" data-bi-cN="Microsoft research copilot experience" target="_blank">现在开始</a></div></div></div><!--/.msr-promo__content--></div><!--/.msr-promo__inner-wrap--><span id="label-external-link" class="sr-only" aria-hidden="true">在新选项卡中打开</span></div><!--/.msr-promo--><h2 class="wp-block-heading" id="avatars-need-to-be-studied-in-realistic-situations">虚拟人物需要在现实情境中进行研究</h2><p>当人们交流时，他们会参与一个受环境、文化背景以及他们感知和解释的非语言线索影响的复杂过程。通过在化身感知研究中优先考虑高生态有效性，研究人员可以揭示这些社会文化影响，并相信他们的发现与数字空间内的现实生活互动相关并适用。</p><p>我们的研究探讨了人口特征的不同组合如何改变人们对化身的反应方式，我们希望鼓励化身设计更具包容性。必须制定一套既定的指导方针来实现这一目标，而这项工作就是朝着这个方向迈出的一步。虽然我们的研究范围有限，但其方法可以广泛应用于不同的设备和设置。</p><h2 class="wp-block-heading" id="acknowledgements">致谢</h2><p>我们要感谢 Ken Jakubzak、James Clemoes、Cornelia Treptow、Michaela Porubanova、Kerry Read、Daniel McDuff、Marina Kuznetsova 和 Mathew Lamb 的研究合作。我们还要感谢 Shawn Bruner 为研究提供了角色，感谢 Panagiotis Giannakopoulos 领导了动画和动作捕捉流程。</p><span id="label-external-link" class="sr-only" aria-hidden="true">在新选项卡中打开</span><p><a href="https://www.microsoft.com/en-us/research/blog/exploring-how-context-culture-and-character-matter-in-avatar-research/">探索虚拟形象研究中的背景、文化和性格的重要性一文</a>首先出现在<a href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>;</content:encoded></item></channel></rss>