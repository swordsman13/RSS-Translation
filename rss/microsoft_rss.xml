<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:wfw="http://wellformedweb.org/CommentAPI/"><channel><title>微软研究院博客 - 微软研究院</title><atom:link href="https://www.microsoft.com/en-us/research/blog/feed/?from=https%3A%2F%2Fresearch.microsoft.com%2Frss%2Fnews.xml&amp;type=rss" rel="self" type="application/rss+xml"></atom:link><link/> https://www.microsoft.com/en-us/research/blog/<description></description><lastbuilddate> 2023 年 7 月 10 日星期一 21:25:43 +0000</lastbuilddate><language> en-US</language><sy:updateperiod>每小时</sy:updateperiod><sy:updatefrequency>1</sy:updatefrequency><generator> https://wordpress.org/?v=6.2.2</generator><item><title> Microsoft 在 ICLP 2023 上：稳健部署云容量以应对电源故障</title><link/>https://www.microsoft.com/en-us/research/blog/microsoft-at-icalp-2023-deploying-cloud-capacity-robustly-against-power-failures/<dc:creator><![CDATA[Alyssa Hughes]]></dc:creator><pubDate> Tue, 11 Jul 2023 14:00:00 +0000</pubDate><category><![CDATA[Research Blog]]></category><guid ispermalink="false"> https://www.microsoft.com/en-us/research/?p=951852 </guid><description><![CDATA[<p>面对不断增长的云资源需求，效率至关重要。高效的电源管理策略解决了数据中心的电源可用性瓶颈。了解我们如何优化电力分配以支持资源的可持续利用。</p><p> <a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/microsoft-at-icalp-2023-deploying-cloud-capacity-robustly-against-power-failures/">Microsoft 在 ICLP 2023 上发布的帖子：部署云容量以应对电源故障，</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>; </description><content:encoded><![CDATA[
<p class="has-text-align-center h6"><em>该研究论文被</em><a href="https://icalp2023.cs.upb.de/" target="_blank" rel="noreferrer noopener"><em>第 50<sup>届</sup>EATCS 国际自动机、语言和编程研讨会 (ICALP 2023)</em></a>接收<em>，该研讨会致力于推进理论计算机科学领域的发展。</em> </p><figure class="wp-block-image aligncenter size-full"><img decoding="async" loading="lazy" width="1400" height="788" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1.jpg" alt="包含博客标题“Microsoft at ICLP 2023：部署云容量以应对电源故障”的图片。它还显示了位于德国帕德博恩的 ICALP 2023 徽标以及已发表论文第一页的图像。背景是微妙的抽象设计。" class="wp-image-952437" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1.jpg 1400w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-300x169.jpg 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-1024x576.jpg 1024w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-768x432.jpg 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-1066x600.jpg 1066w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-655x368.jpg 655w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-343x193.jpg 343w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-240x135.jpg 240w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-640x360.jpg 640w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-960x540.jpg 960w, https://www.microsoft.com/en-us/research/uploads/prod/2023/06/ICALP-2023-BlogHeroFeature-1400x788-1-1280x720.jpg 1280w" sizes="(max-width: 1400px) 100vw, 1400px" /></figure><p>在快速发展的云计算领域，对云资源的需求不断增长给云提供商带来了巨大的压力，迫使他们不断投资新硬件，以满足数据中心不断扩大的容量需求。因此，为所有这些硬件供电的能力已成为一个关键瓶颈，因为为数据中心供电的设备容量有限，需要高效利用。效率至关重要，不仅可以降低运营成本并降低消费者的价格，还可以支持资源的可持续利用，确保资源的长期可用性，并为子孙后代<a href="https://blogs.microsoft.com/blog/2020/01/16/microsoft-will-be-carbon-negative-by-2030/" target="_blank" rel="noreferrer noopener">保护环境</a>。</p><p>同时，确保服务器的电源可用性至关重要，特别是在电源设备发生故障的情况下。 <a href="https://www.microsoft.com/en-us/research/publication/flex-high-availability-datacenters-with-zero-reserved-power/">现代数据中心架构</a><a href="https://www.microsoft.com/en-us/research/publication/flex-high-availability-datacenters-with-zero-reserved-power/"></a>我们采取了一种策略，通过避免每台服务器对单一电源的依赖来降低这种风险。相反，每个服务器由两个设备供电。在正常操作下，服务器从每个设备消耗一半的所需电力。如果发生故障转移，其余设备将介入以支持服务器的全部电力需求，并可能在故障转移期间以增加的容量运行。 </p><figure class="wp-block-image aligncenter size-full is-resized"><img decoding="async" loading="lazy" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure1.png" alt="两张图描述了三台服务器（1、2 和 3）到三个电源设备（a、b 和 c）的电源分配。第一个图显示了正常操作中的分配，其中服务器 1 从设备 a 获取一半电力，一半从设备 b 获取，服务器 2 一半在设备 a 和 c 上，服务器 3 一半在设备 b 和 c 上。第二张图显示了由于设备 c 不可用而导致的故障转移；现在设备a必须支持服务器2的全部功率，设备b必须支持服务器3的全部功率，服务器1仍然从设备a和b获取功率。" class="wp-image-953517" width="752" height="270" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure1.png 1002w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure1-300x108.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure1-768x276.png 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure1-240x86.png 240w" sizes="(max-width: 752px) 100vw, 752px" /><figcaption class="wp-element-caption">图 1：此图描述了在正常操作和故障转移场景中三台服务器（1、2 和 3）到为其提供服务的电源设备（a、b 和 c）的电源分配情况。每个电源设备的高度代表其容量，而这些电源设备内每个服务器的高度则代表其功耗。在故障转移期间，服务器可获取电力的设备较少，从而导致可用资源的能耗增加。 </figcaption></figure><div style="height:15px" aria-hidden="true" class="wp-block-spacer"></div><div class="border-bottom border-top border-gray-300 mt-5 mt-md-4 mb-4 mb-md-5 msr-promo text-center text-md-left alignwide" data-bi-aN="promo" data-bi-id="931956"><p class="msr-promo__label text-gray-800 text-center text-uppercase"><span class="px-4 bg-white display-inline-block font-weight-semibold small">焦点：点播视频</span></p><div class="row pt-3 pb-4 align-items-center"><div class="msr-promo__media col-12 col-md-5"> <a class="bg-gray-300" href="https://www.microsoft.com/en-us/research/blog/ai-explainer-foundation-models-and-the-next-era-of-ai/" aria-label="AI Explainer: Foundation models ​and the next era of AI" data-bi-cN="AI Explainer: Foundation models ​and the next era of AI" target="_blank"><img decoding="async" class="w-100 display-block" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/03/AIEx01_blog_hero_1400x788.png" alt="电脑屏幕截图 一名男子的屏幕截图" /></a></div><div class="msr-promo__content py-3 col-12 col-md"><h2 class="h4"> AI 解释者：基础模型和 AI 的下一个时代</h2><p class="large">探索 Transformer 架构、更大的模型和更多数据以及情境学习如何帮助推动人工智能从感知到创造。 </p><div class="wp-block-buttons justify-content-center justify-content-md-start"><div class="wp-block-button"> <a href="https://www.microsoft.com/en-us/research/blog/ai-explainer-foundation-models-and-the-next-era-of-ai/" class="btn btn-brand glyph-append glyph-append-chevron-right" aria-label="Watch video" data-bi-cN="AI Explainer: Foundation models ​and the next era of AI" target="_blank">看视频</a></div></div></div><!--/.msr-promo__content--></div><!--/.msr-promo__inner-wrap--></div><!--/.msr-promo--><h2 class="wp-block-heading" id="challenges-of-optimizing-power-allocation">优化功率分配的挑战</h2><p>在我们在<a href="https://icalp2023.cs.upb.de/" target="_blank" rel="noreferrer noopener">第 50<sup>届</sup>EATCS 国际自动机、语言和编程研讨会 (ICALP 2023) 上</a>发表的论文“ <a href="https://www.microsoft.com/en-us/research/publication/online-demand-scheduling-with-failovers/" target="_blank" rel="noreferrer noopener">具有故障转移的在线需求调度</a>”中，我们探索了一种简化的模型，该模型强调电源管理，以确定如何优化将服务器放置在数据中心内。我们的模型包含多个电源设备和新的服务器（需求），其中每个电源设备的正常容量为1，还有更大的故障转移容量，B。需求随着时间的推移到达，每个需求都有一个电源需求，我们必须不可撤销地将每个需求分配给一对容量足够的功率器件。目标是最大化分配的需求的总功率，直到我们由于缺乏功率而被迫拒绝需求。这有助于我们最大限度地利用可用电源设备。</p><p>该模型的一个重要方面是不确定性的存在。我们在不知道未来需求的情况下为每个需求分配容量。这种不确定性增加了复杂性，因为必须仔细执行每个需求的设备对选择，以避免可能阻碍未来需求布局的分配。图 2 提供了示例。 </p><figure class="wp-block-image aligncenter size-full"><img decoding="async" loading="lazy" width="860" height="230" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure2.png" alt="两张图，每张图显示四个电源设备 a、b、c 和 d，以及每台设备的电源要求 1/4 的要求。第一个图被标记为“错误分配”，有两个从 a 和 b 获取权力的需求，以及来自 c 和 d 的两个需求。第二个图标记为“良好分配”，总共有六个需求，每个需求都在不同的一对设备上。" class="wp-image-953520" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure2.png 860w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure2-300x80.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure2-768x205.png 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure2-240x64.png 240w" sizes="(max-width: 860px) 100vw, 860px" /><figcaption class="wp-element-caption">图 2：此示例显示了四个电源设备 a、b、c 和 d，故障转移容量 B=1，以及按顺序到达的六个需求，每个设备的电源需求为 1/4。假设目前已收到四项要求。左侧的示例代表了一个错误的分配，无法接受其余两个要求。这是因为，如果我们对设备 a 提出额外的要求，那么如果 b 发生故障，其故障转移能力就会超出。另一方面，如右图所示，良好的分配可以满足所有六个要求。</figcaption></figure><p>图 2 中的示例表明我们应该跨设备对分散需求。否则，如果一台设备发生故障，具有大负载的配对可能会对其余设备产生重大影响。另一方面，过度分散需求并且没有留下足够的空闲设备也存在危险，如图 3 所示。 </p><figure class="wp-block-image aligncenter size-full"><img decoding="async" loading="lazy" width="860" height="220" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure3.png" alt="两张图，每张图显示四个电源设备 a、b、c 和 d，并要求每个设备的电源要求为少量 epsilon 或 0.5。第一个图被标记为“错误分配”，并且有六个功率 epsilon 需求，每个需求都分配在不同的一对设备上。第二个图标记为“良好分配”，并具有分配给设备 a 和 b 的 6 个功率 epsilon 需求，以及分配给设备 c 和 d 的 1 个功率 0.5 需求。" class="wp-image-953523" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure3.png 860w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure3-300x77.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure3-768x196.png 768w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ICALP_Blog_figure3-240x61.png 240w" sizes="(max-width: 860px) 100vw, 860px" /><figcaption class="wp-element-caption">图 3：此示例涉及四个电源设备，分别标记为 a、b、c 和 d，每个设备的故障转移能力 B=1。该场景还包括按顺序到达的七个需求，前六个要求每个设备只需要很少的功率（例如，epsilon = 0.01 个功率单位），最后一个需要 0.5 个功率单位。在（a）中，当小需求分布在对之间时，由于超出了故障转移容量，因此无法满足最终需求。然而，通过将小需求集中在一对功率器件上，如(b)所示，可以成功满足所有需求。</figcaption></figure><p>在分析图 2 和图 3 中的示例时，很明显，实现正确的平衡至关重要。这需要在对之间有效地分配需求，以尽量减少故障转移造成的任何后果，同时还确保有足够数量的设备的可用性来满足未来的需求。实现最佳分配可以避免过早地出现无法分配的需求。</p><p>为了应对这一挑战，我们开发了保证有效利用可用电力资源的算法。事实上，即使没有预先了解需求，我们的分配也已被证明接近最优。我们的算法本质上克服了问题固有的不确定性。</p><h2 class="wp-block-heading" id="optimizing-for-the-worst-case-scenario">针对最坏情况进行优化</h2><p>我们的第一个算法采用保守的方法，防止出现最坏的情况。它保证，无论需求请求的顺序如何，与先验了解所有需求的最优解决方案相比，它都将使用至少一半的功率。正如我们在<a href="https://www.microsoft.com/en-us/research/publication/online-demand-scheduling-with-failovers/" target="_blank" rel="noreferrer noopener">论文</a>中所示，这一结果代表了在最具挑战性的情况下可实现的最佳结果。</p><p>为了有效地在跨设备分配需求和确保足够的设备可用性之间取得平衡，该算法的目标是根据电力需求对需求进行分组。然后将每组需求分别分配给适当大小的设备集合。该算法旨在整合受控区域中的相似需求，从而实现故障转移资源的有效利用。值得注意的是，我们最多为每个集合中的每对设备分配一个需求，除非是单独处理的次要需求。</p><h2 class="wp-block-heading" id="optimizing-for-real-world-demand">针对现实世界的需求进行优化</h2><p>由于之前的算法优先考虑针对最坏情况需求序列的鲁棒性，因此可能会无意中导致可用功率利用率不足 1/2，这在该设置中是不可避免的。然而，这些最坏的情况在典型的数据中心操作中并不常见。因此，我们将重点转向更现实的模型，其中需求来自未知的概率分布。我们在此随机到达模型中设计了第二个算法，证明随着需求和电力设备数量的增加，其分配逐渐收敛到最佳全知解决方案，确保不会浪费电力。</p><p>为了实现这一目标，该算法从历史数据中学习，从而根据过去的需求做出明智的分配决策。通过创建源自先前需求的“分配模板”，我们学习如何分配未来的需求。为了实现这一概念并证明其保证，我们开发了概率和优化方面的新工具，这对于解决未来的类似问题可能很有价值。</p><p> <a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/microsoft-at-icalp-2023-deploying-cloud-capacity-robustly-against-power-failures/">Microsoft 在 ICLP 2023 上发布的帖子：部署云容量以应对电源故障，</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>;</content:encoded></item><item><title>使用 APRON 安全、渐进地更新计算机系统</title><link/>https://www.microsoft.com/en-us/research/blog/renovating-computer-systems-securely-and-progressively-with-apron/<dc:creator><![CDATA[Brenda Potts]]></dc:creator><pubDate> Mon, 10 Jul 2023 16:00:00 +0000</pubDate><category><![CDATA[Research Blog]]></category><guid ispermalink="false"> https://www.microsoft.com/en-us/research/?p=954321 </guid><description><![CDATA[<p>该研究论文被2023年USENIX年度技术会议（ATC）接收，该会议致力于推进系统研究领域。无论是个人计算机还是云实例，确保人们每天使用的计算机系统可靠且安全至关重要。这些系统的有效性至关重要，因为如果存储[...]</p><p> <a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/renovating-computer-systems-securely-and-progressively-with-apron/">使用 APRON 安全且渐进地翻新计算机系统一文</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>; </description><content:encoded><![CDATA[
<p class="has-text-align-center">该研究论文被<a href="https://www.usenix.org/conference/atc23" target="_blank" rel="noreferrer noopener"><strong><em>2023年USENIX年度技术会议（ATC）</em></strong></a><strong><em>接收</em></strong><strong><em>，该会议致力于推进系统研究领域。</em></strong></p><p>无论是个人计算机还是云实例，确保人们每天使用的计算机系统可靠且安全至关重要。这些系统的有效性至关重要，因为如果包含重要可执行文件和数据的存储设备变得无效，整个系统都会受到影响。许多事件可能会危害计算机系统或其中存储的数据的有效性，例如<a href="https://learn.microsoft.com/en-us/security/ransomware/human-operated-ransomware" target="_blank" rel="noreferrer noopener">勒索软件</a>等恶意攻击；硬件或软件错误可能会损坏系统，而缺乏定期维护（例如<a href="https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching" target="_blank" rel="noreferrer noopener">补丁安装）</a>可能会导致系统过时。虽然理想的情况是创建一个完美的计算机系统来防止此类无效状态的发生，但在实践中实现这种完美可能具有挑战性。</p><h2 class="wp-block-heading" id="cyber-resilient-system-and-recovery">网络弹性系统和恢复</h2><p><a href="https://www.microsoft.com/en-us/research/project/cyber-resilient-platform-program/" target="_blank" rel="noreferrer noopener">网络弹性系统</a>是解决无效系统状态的实用方法。该弹性系统通过分析各种内部和外部信号，有效识别可疑的状态损坏或保存。如果确认有任何损坏，则会恢复系统。在我们之前在<a href="https://www.ieee-security.org/TC/SP2019/" target="_blank" rel="noreferrer noopener">第 40<sup>届</sup>IEEE 安全与隐私研讨会</a>上展示的<a href="https://www.microsoft.com/en-us/research/publication/dominance-as-a-new-trusted-computing-primitive-for-the-internet-of-things/" target="_blank" rel="noreferrer noopener">工作</a>中，我们演示了使用非常小的硬件组件进行无条件系统恢复的可行性。该组件强制重置整个系统，使其在不存在经过身份验证的延迟请求时执行受信任的微小代码以进行系统引导和恢复。</p><p>然而，现有的恢复机制，包括我们之前的工作，主要关注<em>何时</em>恢复系统而不是<em>如何恢复</em>。因此，这些机制忽视了系统恢复期间可能出现的效率和安全问题。通常，这些机制包含负责执行恢复任务的专用恢复环境。系统重置后，如果发现系统无效（如图1所示），则调用恢复环境。在这种情况下，恢复环境使用从可靠来源或安全存储的单独位置下载的参考映像来完全恢复系统。 </p><figure class="wp-block-image aligncenter size-full"><img decoding="async" loading="lazy" width="400" height="230" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure1_400px.png" alt="图 1 中有两个图。第一个图描述了一种情况，其中在系统开机或重置时执行的引导代码识别操作系统的某些损坏部分。然后，引导代码执行恢复环境以完全恢复所有损坏的部分并重置系统。第二张图描述了完全恢复和重置后的情况。现在引导代码在操作系统中没有发现问题并执行它。" class="wp-image-954378" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure1_400px.png 400w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure1_400px-300x173.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure1_400px-240x138.png 240w" sizes="(max-width: 400px) 100vw, 400px" /><figcaption class="wp-element-caption">图 1：系统启动并正常恢复。</figcaption></figure><p>不幸的是，执行完整的系统恢复会导致系统停机时间延长，因为恢复环境无法支持计算机系统预期的任何其他常规任务。换句话说，系统在恢复过程中保持不可用状态。此外，选择下载参考图像只会延长整体停机时间。尽管使用存储的图像可以稍微缓解这个问题，但它会带来安全问题，因为存储的图像可能已经过时。有人可能会说，可以通过检查每个文件或数据块的有效性并有选择地仅恢复受影响的文件或数据块来规避完全恢复。然而，由于确定差异所需的额外计算以及现代面向吞吐量的块存储设备的低效利用，这种增量恢复方法比完全恢复更长。</p><h2 class="wp-block-heading" id="secure-and-progressive-system-renovation">安全渐进的系统改造</h2><p>在我们在<a href="https://www.usenix.org/conference/atc23" target="_blank" rel="noreferrer noopener">2023 年 USENIX 年度技术会议</a><a href="https://www.usenix.org/conference/atc23" target="_blank" rel="noreferrer noopener">(USENIX ATC 2023)</a>上发表的论文“ <a href="https://www.microsoft.com/en-us/research/publication/apron-authenticated-and-progressive-system-image-renovation/" target="_blank" rel="noreferrer noopener">APRON：经过身份验证的渐进式系统映像更新</a>”中，我们介绍了 APRON，这是一种以最少的停机时间安全地更新计算机系统的新颖机制。 APRON 与传统恢复机制的一个关键区别在于：它不会在恢复环境中完全恢复系统。相反，它有选择地处理启动和系统恢复所需的一小组系统组件或包含它们的数据块，包括操作系统内核和 APRON 内核模块，如图 2 所示。一旦恢复这些组件，系统启动到部分更新状态，可以执行常规任务，根据需要逐步恢复其他无效的系统组件<em>。</em> </p><figure class="wp-block-image aligncenter size-full"><img decoding="async" loading="lazy" width="400" height="300" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure2_400px.png" alt="图 2：使用 APRON 启动系统。" class="wp-image-954450" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure2_400px.png 400w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure2_400px-300x225.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure2_400px-80x60.png 80w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure2_400px-240x180.png 240w" sizes="(max-width: 400px) 100vw, 400px" /><figcaption class="wp-element-caption">图 2：使用 APRON 启动系统。</figcaption></figure><p>当从通过 1 Gbps 链路连接的远程存储服务器检索部分参考映像时，与正常系统恢复相比，这种设计使 APRON 能够将系统恢复期间的停机时间显着减少多达 28 倍。此外，APRON还包含一个后台线程，专门用于修复将来可能访问的剩余无效系统组件。该后台线程以低优先级运行，以避免中断重要的前台任务。在这两项改造活动中，APRON 在一系列实际应用程序中的平均运行时开销仅为 9%。一旦改造过程完成，运行时开销就会消失。</p><p> APRON 的与众不同之处在于其独特的方法：APRON 内核模块充当应用程序或内核线程与系统存储设备之间的中介，允许其按需验证和恢复每个数据块，如图 3 所示。 , APRON 遵循一个简单的过程。如果请求的区块有效，APRON 会立即将其交付给请求者。如果发现无效，APRON 将使用参考图像来修复该块，然后再将其提供给请求者。 </p><figure class="wp-block-image aligncenter size-full"><img decoding="async" loading="lazy" width="400" height="286" src="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure3_400px.png" alt="图 3：使用 APRON 进行系统存储改造。" class="wp-image-954447" srcset="https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure3_400px.png 400w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure3_400px-300x215.png 300w, https://www.microsoft.com/en-us/research/uploads/prod/2023/07/ATC-2023_Figure3_400px-240x172.png 240w" sizes="(max-width: 400px) 100vw, 400px" /><figcaption class="wp-element-caption">图 3：使用 APRON 进行系统存储改造。</figcaption></figure><p>为了高效、安全地验证任意数据块，APRON 使用<a href="https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/verity.html" target="_blank" rel="noreferrer noopener">Merkle 哈希树</a>，它以加密方式总结参考图像的每个数据块。 APRON 进一步以加密方式验证 Merkle 树的根哈希值，以便恶意行为者无法篡改它。为了进一步提高性能，APRON将零块（用零填充的数据块）视为一种特殊情况，并执行重复数据删除以避免重复检索等效块。我们在<a href="https://www.microsoft.com/en-us/research/publication/apron-authenticated-and-progressive-system-image-renovation/" target="_blank" rel="noreferrer noopener">论文</a>中讨论了该过程的技术细节。 </p><h2 class="wp-block-heading" id="looking-forward-extending-apron-to-container-engines-and-hypervisors">展望未来——将 APRON 扩展到容器引擎和虚拟机管理程序</h2><p>APRON 简单且适用范围广泛的核心设计可以轻松应用于需要高效、安全的图像恢复或配置的其他用例。我们目前正在探索在容器引擎或虚拟机管理程序中实现 APRON 的可能性，以实现容器层或虚拟磁盘映像的无代理 APRON。通过将 APRON 的功能扩展到这些环境，我们的目标是提供高效可靠的映像恢复和配置流程，而无需修改容器实例或添加来宾操作系统。</p><p> <a rel="nofollow" href="https://www.microsoft.com/en-us/research/blog/renovating-computer-systems-securely-and-progressively-with-apron/">使用 APRON 安全且渐进地翻新计算机系统一文</a>首先出现在<a rel="nofollow" href="https://www.microsoft.com/en-us/research">Microsoft Research</a>上。</p> ]]>;</content:encoded></item></channel></rss>